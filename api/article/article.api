syntax = "v1"

info (
	title:  "article service"
	desc:   "article content service"
	author: "lius-new"
	email:  "liushui_new@126.com"
)

type (
	// article: 文章类型
	Article {
		Id          string   `json:"id"` // 文章id
		Title       string   `json:"title"` // 文章标题
		Description string   `json:"description"` // 文章描述
		Tags        []string `json:"tags"` // 文章tag
		UpdateAt    int64    `json:"updateAt"` // 文章更新时间
	}
	// 分页获取文章的参数
	getArticleByPageWithViewRequest {
		PageNum  int64 `json:"page_num"` // 多少页
		PageSize int64 `json:"page_size"` // 每页多少条数据
	}
	// 分页获取文章的响应
	getArticleByPageWithViewResponse {
		Data  []Article `json:"data"` // 当前页的文章数据
		Total int64     `json:"total"`
	}
	// 根据id获取文章的参数
	getArticleByIdWithViewRequest {
		Id string `json:"id"` // 文章id
	}
	// 根据id获取文章的响应
	getArticleByIdWithViewResponse {
		Id          string   `json:"id"` // 文章id
		Title       string   `json:"title"` // 文章标题
		Description string   `json:"description"` // 文章描述
		Content     string   `json:"content"` // 文章内容
		Tags        []string `json:"tags"` // 文章tag
		Covers      []string `json:"covers"` // 文章tag
		UpdateAt    int64    `json:"updateAt"` // 文章更新时间
	}
	// 根据tag id获取文章的参数
	getArticleByTagNameWithViewRequest {
		TagName  string `json:"tag_name"` // 标签name
		PageNum  int64  `json:"page_num"` // 多少页
		PageSize int64  `json:"page_size"` // 每页多少条数据
	}
	// 根据tag id获取文章的响应
	getArticleByTagNameWithViewResponse {
		Data  []Article `json:"data"` // 当前页的文章数据
		Total int64     `json:"total"`
	}
	// 搜索文章的参数
	searchArticleRequest {
		Search string `path:"search"` // 搜素内容: 标题, 描述, 内容
	}
	// 搜索文章的响应
	searchArticleResponse {
		Data  []Article `json:"data"` // 当前页的文章数据
		Total int64     `json:"total"`
	}
	// 查看指定图片
	viewImageRequest {
		Hash string `path:"hash"` // 搜素内容: 标题, 描述, 内容
	}
	// 查看指定图片
	viewImageResponse {
		Base64 string `json:"base64"` // 当前页的文章数据
	}
)

@server (
	prefix:     /articles
	middleware: AnalyzerMiddleware
)
service article-api {
	// view
	@handler GetArticlesByPageWithView
	post / (getArticleByPageWithViewRequest) returns (getArticleByPageWithViewResponse) // 批量查看文章的请求声明(后台. 需要权限校验)

	@handler GetArticleByIdWithView
	post /id (getArticleByIdWithViewRequest) returns (getArticleByIdWithViewResponse) // 根据id获取文章

	@handler GetArticleByTagNameWithView
	post /tags (getArticleByTagNameWithViewRequest) returns (getArticleByTagNameWithViewResponse) // 获取文章

	@handler SearchArticle
	get /:search (searchArticleRequest) returns (searchArticleResponse) // 搜索文章

	@handler ViewImage
	get /image/:hash (viewImageRequest) returns (viewImageResponse) // 查看指定图片(返回的是文件对象)

	@handler ViewImageWithBase64
	get /image/base64/:hash (viewImageRequest) returns (viewImageResponse) // 查看指定图片(返回base64)
}

type (
	//Data : 文章类型(后台)
	Data {
		Id          string   `json:"id"` // 文章id
		Title       string   `json:"title"` // 文章标题
		Content     string   `json:"content"` // 文章内容
		Description string   `json:"description"` // 文章描述
		Tags        []string `json:"tags"` // 文章tag
		Covers      []string `json:"covers"` // 文章Cover图片
		Visiable    bool     `json:"visiable"` // 文章状态
		CreateAt    int64    `json:"createAt"` // 文章创建时间
		UpdateAt    int64    `json:"updateAt"` // 文章更新时间
		DeleteAt    int64    `json:"deleteAt"` // 删除更新时间
	}
	// 获取文章的参数
	getArticlesByPageWithBackendRequest {
		PageNum  int64 `json:"page_num"` // 多少页
		PageSize int64 `json:"page_size"` // 每页多少条数据
	}
	// 分页获取文章的响应
	getArticlesByPageWithBackendResponse {
		Data  []Data `json:"data"`
		Total int64  `json:"total"`
	}
	// 根据id获取文章的参数
	getArticleByIdWithBackendRequest {
		Id string `json:"id"` // 文章id
	}
	// 根据id获取文章的响应
	getArticleByIdWithBackendResponse {
		Data Data `json:"data"`
	}
	// 根据tag id获取文章的参数
	getArticleByTagNameWithBackendRequest {
		TagName  string `json:"tag_name"` // 标签name
		PageNum  int64  `json:"page_num"` // 多少页
		PageSize int64  `json:"page_size"` // 每页多少条数据
	}
	// 根据tag id获取文章的响应
	getArticleByTagNameWithBackendResponse {
		Data  []Data `json:"data"` // 当前页的文章数据
		Total int64  `json:"total"`
	}
	// 获取所有的tag的请求参数
	getAllTagRequest  {}
	// 获取所有的tag的响应结果
	TagResponse {
		Id   string `json:"id"`
		Name string `json:"name"`
	}
	getAllTagResponse {
		Data []TagResponse `json:"data"` // 返回的标签
	}
	// 修改文章标题的参数
	modifyArticleTitleRequest {
		Id    string `json:"id"` // 文章id
		Title string `json:"title"` // 文章id
	}
	// 修改文章标题的响应
	modifyArticleTitleResponse  {}
	// 修改文章描述的参数
	modifyArticleDescRequest {
		Id   string `json:"id"` // 文章id
		Desc string `json:"desc"` // 文章id
	}
	// 修改文章描述的响应
	modifyArticleDescResponse  {}
	// 修改文章内容的参数
	modifyArticleContentRequest {
		Id      string `json:"id"` // 文章id
		Content string `json:"content"` // 文章id
	}
	// 修改文章内容的响应
	modifyArticleContentResponse  {}
	// 修改文章Cover的参数
	modifyArticleCoverRequest {
		Id     string   `json:"id"` // 文章id
		Covers []string `json:"covers"` // 文章id
	}
	// 修改文章Cover的响应
	modifyArticleCoverResponse  {}
	// 修改文章tag的参数
	modifyArticleTagRequest {
		Id   string   `json:"id"` // 文章id
		Tags []string `json:"tags"` // 文章id
	}
	// 修改文章tag的响应
	modifyArticleTagResponse  {}
	// 修改文章visiable的参数
	modifyArticleVisiableRequest {
		Id       string `json:"id"` // 文章id
		Visiable bool   `json:"visiable"` // 文章id
	}
	// 修改文章visiable的响应
	modifyArticleVisiableResponse  {}
	// 修改文章
	modifyArticleRequest {
		Id          string   `json:"id"` // 文章id
		Title       string   `json:"title"` // 文章标题
		Content     string   `json:"content"` // 文章内容
		Description string   `json:"description"` // 文章描述
		Tags        []string `json:"tags"` // 文章tag
		Covers      []string `json:"covers"` // 文章Cover图片
		Visiable    bool     `json:"visiable"` // 文章visibale
	}
	modifyArticleResponse  {}
	// 添加文章的参数
	createArticleRequest {
		Title       string   `json:"title"` // 文章标题
		Content     string   `json:"content"` // 文章内容
		Description string   `json:"description"` // 文章描述
		Tags        []string `json:"tags"` // 文章tag
		Covers      []string `json:"covers"` // 文章Cover图片
	}
	// 添加文章的响应
	createArticleResponse  {}
	// 添加文章中的图片，有些文章内部会包含图片. TODO: 这个接口会将数据放到covers数据集合中(mongodb), 事实上cover并不是存放这些图片的地方现在是图省事。
	createImageWithArticleRequest {
		Contents []string `json:"contents"`
	}
	createImageWithArticleResponse {
		Hashs []string `json:"hashs"` // hash
	}
	// 删除文章的参数
	deleteArticleRequest {
		Id string `json:"id"` // 文章id
	}
	// 删除文章的响应
	deleteArticleResponse {
		Id string `json:"id"` // 文章id
	}
)

@server (
	prefix:     /articles
	middleware: AnalyzerMiddleware,AuthMiddleware
)
service article-api {
	// view
	@handler GetArticlesByPageWithBackend
	post /backend (getArticlesByPageWithBackendRequest) returns (getArticlesByPageWithBackendResponse) // 批量查看文章的请求声明(后台. 需要权限校验)

	@handler GetArticleByIdWithBackend
	post /backend/id (getArticleByIdWithBackendRequest) returns (getArticleByIdWithBackendResponse) // 获取文章

	@handler GetArticleByTagNameWithBackend
	post /backend/tag (getArticleByTagNameWithBackendRequest) returns (getArticleByTagNameWithBackendResponse) // 获取文章

	@handler GetAllTag
	get /backend/tag (getAllTagRequest) returns (getAllTagResponse) // 获取tag

	// modify
	@handler ModifyArticleTitle
	post /backend/modify/title (modifyArticleTitleRequest) returns (modifyArticleTitleResponse)

	@handler ModifyArticleDesc
	post /backend/modify/desc (modifyArticleDescRequest) returns (modifyArticleDescResponse)

	@handler ModifyArticleContent
	post /backend/modify/content (modifyArticleContentRequest) returns (modifyArticleContentResponse)

	@handler ModifyArticleCover
	post /backend/modify/cover (modifyArticleCoverRequest) returns (modifyArticleCoverResponse)

	@handler ModifyArticleTag
	post /backend/modify/tag (modifyArticleTagRequest) returns (modifyArticleTagResponse)

	@handler ModifyArticleVisiable
	post /backend/modify/visiable (modifyArticleVisiableRequest) returns (modifyArticleVisiableResponse)

	@handler ModifyArticle
	post /backend/modify (modifyArticleRequest) returns (modifyArticleResponse)

	// add
	@handler CreateArticle
	post /backend/create (createArticleRequest) returns (createArticleResponse)

	@handler CreateImageWithArticle
	post /backend/image/create (createImageWithArticleRequest) returns (createImageWithArticleResponse)

	// delete
	@handler DeleteArticle
	post /backend/deletet/id (deleteArticleRequest) returns (deleteArticleResponse)
}

