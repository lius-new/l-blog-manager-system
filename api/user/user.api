syntax = "v1"

// user service info
info (
	title:  "user service"
	desc:   "user manager service"
	author: "lius-new"
	email:  "liushui_new@126.com"
)

// 登陆接口相关类型
type (
	loginRequest {
		Username string `json:"username"`
		Password string `json:"password"`
	}
	loginResponse {
		Token string `json:"token"`
	}
)

// 接口服务
@server (
	// 接口前缀
	prefix:     /users
	middleware: AnalyzerMiddleware
)
service user-api {
	// 登陆接口
	@handler Login
	post /login (loginRequest) returns (loginResponse)

	// 创建用户接口(这个接口逻辑中会限制注册的数量, 当注册数量超过1就不能调用该接口。想额外添加就去登陆后台调用Create)
	@handler Register
	post /register (createRequest) returns (createResponse)
}

type (
	// 用户存储在后台的信息.
	UserBackend {
		Id       string `json:"id"`
		Username string `json:"username"`
		Status   bool   `json:"status"`
	}
	// 创建用户的请求参数类型
	createRequest {
		Username string `json:"username"`
		Password string `json:"password"`
	}
	// 创建用户返回值,(修改和根据id查询用户也都用的是这个接口)
	createResponse  {}
	// 根据id删除或者查询用户的请求参数类型
	idRequest {
		Id string `path:"id"`
	}
	// 删除用户返回值
	deleteResponse  {}
	// 修改用户请求参数
	modifyUserNameAndPasswordRequest {
		Id       string `json:"id"`
		Username string `json:"username"`
		Password string `json:"password"`
	}
	modifyUserNameRequest {
		Id       string `json:"id"`
		Username string `json:"username"`
	}
	modifyPasswordRequest {
		Id       string `json:"id"`
		Password string `json:"password"`
	}
	modifyStatusRequest {
		Id     string `json:"id"`
		Status bool   `json:"status"`
	}
	modifyRefreshSecretRequest {
		Id   string `json:"id"`
		Hour int64  `json:"hour"` // hour可以指定token有效时间
	}
	// 根据分页查询某页用户的参数
	selectPage {
		PageNum  int64 `json:"page_num"`
		PageSize int64 `json:"page_size"`
	}
	// 分页返回结果
	selectPageResponse {
		Data  []UserBackend `json:"data"`
		Total int64         `json:"total"`
	}
)

// 接口服务
@server (
	//  接口前缀
	prefix: /users
	// 认证中间件
	middleware: AuthMiddleware
	middleware: AnalyzerMiddleware,AuthMiddleware
)
service user-api {
	// 修改用户接口(用户名和密码)
	@handler ModifyUserNameAndPassword
	put / (modifyUserNameAndPasswordRequest) returns (createResponse)

	// 修改用户名, 返回空内容
	@handler ModifyUserName
	put /username (modifyUserNameRequest) returns (createResponse)

	// 修改密码, 返回空内容
	@handler ModifyPassword
	put /password (modifyPasswordRequest) returns (createResponse)

	// 修改用户状态,返回空内容
	@handler ModifyStatus
	put /status (modifyStatusRequest) returns (createResponse)

	// 修改用户secret,返回空内容
	@handler ModifyRefreshSecret
	put /secret (modifyRefreshSecretRequest) returns (createResponse)

	// 添加用户,这个是供管理使用的(注册调用register接口)。
	@handler Create
	post / (createRequest) returns (createResponse)

	// 删除用户接口
	@handler Delete
	delete /:id (idRequest) returns (deleteResponse)

	// 根据id选择用户接口
	@handler Select
	get /:id (idRequest) returns (UserBackend)

	// 根据分页参数选择用户接口
	@handler SelectByPage
	get / (selectPage) returns (selectPageResponse)
}

