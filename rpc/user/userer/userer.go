// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userer

import (
	"context"

	"github.com/lius-new/blog-backend/rpc/user/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteUserRequest           = user.DeleteUserRequest
	DeleteUserResponse          = user.DeleteUserResponse
	InsertUserRequest           = user.InsertUserRequest
	LoginResponse               = user.LoginResponse
	LoginUserRequest            = user.LoginUserRequest
	ModifyUserRequest           = user.ModifyUserRequest
	ModifyUserResponse          = user.ModifyUserResponse
	SelectUserByPageRequest     = user.SelectUserByPageRequest
	SelectUserByUsernameRequest = user.SelectUserByUsernameRequest
	SelectUserRequest           = user.SelectUserRequest
	UserResponse                = user.UserResponse
	UsersResponse               = user.UsersResponse

	Userer interface {
		Insert(ctx context.Context, in *InsertUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
		Modify(ctx context.Context, in *ModifyUserRequest, opts ...grpc.CallOption) (*ModifyUserResponse, error)
		Select(ctx context.Context, in *SelectUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
		SelectByName(ctx context.Context, in *SelectUserByUsernameRequest, opts ...grpc.CallOption) (*UserResponse, error)
		SelectByPage(ctx context.Context, in *SelectUserByPageRequest, opts ...grpc.CallOption) (*UsersResponse, error)
		Delete(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
		Login(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	}

	defaultUserer struct {
		cli zrpc.Client
	}
)

func NewUserer(cli zrpc.Client) Userer {
	return &defaultUserer{
		cli: cli,
	}
}

func (m *defaultUserer) Insert(ctx context.Context, in *InsertUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	client := user.NewUsererClient(m.cli.Conn())
	return client.Insert(ctx, in, opts...)
}

func (m *defaultUserer) Modify(ctx context.Context, in *ModifyUserRequest, opts ...grpc.CallOption) (*ModifyUserResponse, error) {
	client := user.NewUsererClient(m.cli.Conn())
	return client.Modify(ctx, in, opts...)
}

func (m *defaultUserer) Select(ctx context.Context, in *SelectUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	client := user.NewUsererClient(m.cli.Conn())
	return client.Select(ctx, in, opts...)
}

func (m *defaultUserer) SelectByName(ctx context.Context, in *SelectUserByUsernameRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	client := user.NewUsererClient(m.cli.Conn())
	return client.SelectByName(ctx, in, opts...)
}

func (m *defaultUserer) SelectByPage(ctx context.Context, in *SelectUserByPageRequest, opts ...grpc.CallOption) (*UsersResponse, error) {
	client := user.NewUsererClient(m.cli.Conn())
	return client.SelectByPage(ctx, in, opts...)
}

func (m *defaultUserer) Delete(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	client := user.NewUsererClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

func (m *defaultUserer) Login(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUsererClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}
