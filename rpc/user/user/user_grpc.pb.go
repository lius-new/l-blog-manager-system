// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsererClient is the client API for Userer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsererClient interface {
	Insert(ctx context.Context, in *InsertUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	Modify(ctx context.Context, in *ModifyUserRequest, opts ...grpc.CallOption) (*ModifyUserResponse, error)
	ModifyUserName(ctx context.Context, in *ModifyUserNameRequest, opts ...grpc.CallOption) (*ModifyUserNameRequest, error)
	ModifyPassword(ctx context.Context, in *ModifyPasswordRequest, opts ...grpc.CallOption) (*ModifyPasswordResponse, error)
	ModifyStatus(ctx context.Context, in *ModifyUserStatusRequest, opts ...grpc.CallOption) (*ModifyUserStatusRequest, error)
	ModifySecretId(ctx context.Context, in *ModifySecretRequest, opts ...grpc.CallOption) (*ModifySecretRequest, error)
	Select(ctx context.Context, in *SelectUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	SelectByName(ctx context.Context, in *SelectUserByUsernameRequest, opts ...grpc.CallOption) (*UserResponse, error)
	SelectByPage(ctx context.Context, in *SelectUserByPageRequest, opts ...grpc.CallOption) (*UsersResponse, error)
	Delete(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	Login(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type usererClient struct {
	cc grpc.ClientConnInterface
}

func NewUsererClient(cc grpc.ClientConnInterface) UsererClient {
	return &usererClient{cc}
}

func (c *usererClient) Insert(ctx context.Context, in *InsertUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/user.Userer/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usererClient) Modify(ctx context.Context, in *ModifyUserRequest, opts ...grpc.CallOption) (*ModifyUserResponse, error) {
	out := new(ModifyUserResponse)
	err := c.cc.Invoke(ctx, "/user.Userer/Modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usererClient) ModifyUserName(ctx context.Context, in *ModifyUserNameRequest, opts ...grpc.CallOption) (*ModifyUserNameRequest, error) {
	out := new(ModifyUserNameRequest)
	err := c.cc.Invoke(ctx, "/user.Userer/ModifyUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usererClient) ModifyPassword(ctx context.Context, in *ModifyPasswordRequest, opts ...grpc.CallOption) (*ModifyPasswordResponse, error) {
	out := new(ModifyPasswordResponse)
	err := c.cc.Invoke(ctx, "/user.Userer/ModifyPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usererClient) ModifyStatus(ctx context.Context, in *ModifyUserStatusRequest, opts ...grpc.CallOption) (*ModifyUserStatusRequest, error) {
	out := new(ModifyUserStatusRequest)
	err := c.cc.Invoke(ctx, "/user.Userer/ModifyStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usererClient) ModifySecretId(ctx context.Context, in *ModifySecretRequest, opts ...grpc.CallOption) (*ModifySecretRequest, error) {
	out := new(ModifySecretRequest)
	err := c.cc.Invoke(ctx, "/user.Userer/ModifySecretId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usererClient) Select(ctx context.Context, in *SelectUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/user.Userer/Select", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usererClient) SelectByName(ctx context.Context, in *SelectUserByUsernameRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/user.Userer/SelectByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usererClient) SelectByPage(ctx context.Context, in *SelectUserByPageRequest, opts ...grpc.CallOption) (*UsersResponse, error) {
	out := new(UsersResponse)
	err := c.cc.Invoke(ctx, "/user.Userer/SelectByPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usererClient) Delete(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/user.Userer/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usererClient) Login(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/user.Userer/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsererServer is the server API for Userer service.
// All implementations must embed UnimplementedUsererServer
// for forward compatibility
type UsererServer interface {
	Insert(context.Context, *InsertUserRequest) (*UserResponse, error)
	Modify(context.Context, *ModifyUserRequest) (*ModifyUserResponse, error)
	ModifyUserName(context.Context, *ModifyUserNameRequest) (*ModifyUserNameRequest, error)
	ModifyPassword(context.Context, *ModifyPasswordRequest) (*ModifyPasswordResponse, error)
	ModifyStatus(context.Context, *ModifyUserStatusRequest) (*ModifyUserStatusRequest, error)
	ModifySecretId(context.Context, *ModifySecretRequest) (*ModifySecretRequest, error)
	Select(context.Context, *SelectUserRequest) (*UserResponse, error)
	SelectByName(context.Context, *SelectUserByUsernameRequest) (*UserResponse, error)
	SelectByPage(context.Context, *SelectUserByPageRequest) (*UsersResponse, error)
	Delete(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	Login(context.Context, *LoginUserRequest) (*LoginResponse, error)
	mustEmbedUnimplementedUsererServer()
}

// UnimplementedUsererServer must be embedded to have forward compatible implementations.
type UnimplementedUsererServer struct {
}

func (UnimplementedUsererServer) Insert(context.Context, *InsertUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedUsererServer) Modify(context.Context, *ModifyUserRequest) (*ModifyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedUsererServer) ModifyUserName(context.Context, *ModifyUserNameRequest) (*ModifyUserNameRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyUserName not implemented")
}
func (UnimplementedUsererServer) ModifyPassword(context.Context, *ModifyPasswordRequest) (*ModifyPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPassword not implemented")
}
func (UnimplementedUsererServer) ModifyStatus(context.Context, *ModifyUserStatusRequest) (*ModifyUserStatusRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyStatus not implemented")
}
func (UnimplementedUsererServer) ModifySecretId(context.Context, *ModifySecretRequest) (*ModifySecretRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySecretId not implemented")
}
func (UnimplementedUsererServer) Select(context.Context, *SelectUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Select not implemented")
}
func (UnimplementedUsererServer) SelectByName(context.Context, *SelectUserByUsernameRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectByName not implemented")
}
func (UnimplementedUsererServer) SelectByPage(context.Context, *SelectUserByPageRequest) (*UsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectByPage not implemented")
}
func (UnimplementedUsererServer) Delete(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUsererServer) Login(context.Context, *LoginUserRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUsererServer) mustEmbedUnimplementedUsererServer() {}

// UnsafeUsererServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsererServer will
// result in compilation errors.
type UnsafeUsererServer interface {
	mustEmbedUnimplementedUsererServer()
}

func RegisterUsererServer(s grpc.ServiceRegistrar, srv UsererServer) {
	s.RegisterService(&Userer_ServiceDesc, srv)
}

func _Userer_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsererServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Userer/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsererServer).Insert(ctx, req.(*InsertUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userer_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsererServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Userer/Modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsererServer).Modify(ctx, req.(*ModifyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userer_ModifyUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsererServer).ModifyUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Userer/ModifyUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsererServer).ModifyUserName(ctx, req.(*ModifyUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userer_ModifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsererServer).ModifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Userer/ModifyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsererServer).ModifyPassword(ctx, req.(*ModifyPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userer_ModifyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsererServer).ModifyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Userer/ModifyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsererServer).ModifyStatus(ctx, req.(*ModifyUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userer_ModifySecretId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifySecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsererServer).ModifySecretId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Userer/ModifySecretId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsererServer).ModifySecretId(ctx, req.(*ModifySecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userer_Select_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsererServer).Select(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Userer/Select",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsererServer).Select(ctx, req.(*SelectUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userer_SelectByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectUserByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsererServer).SelectByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Userer/SelectByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsererServer).SelectByName(ctx, req.(*SelectUserByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userer_SelectByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectUserByPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsererServer).SelectByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Userer/SelectByPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsererServer).SelectByPage(ctx, req.(*SelectUserByPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsererServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Userer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsererServer).Delete(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userer_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsererServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Userer/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsererServer).Login(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Userer_ServiceDesc is the grpc.ServiceDesc for Userer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Userer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Userer",
	HandlerType: (*UsererServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _Userer_Insert_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _Userer_Modify_Handler,
		},
		{
			MethodName: "ModifyUserName",
			Handler:    _Userer_ModifyUserName_Handler,
		},
		{
			MethodName: "ModifyPassword",
			Handler:    _Userer_ModifyPassword_Handler,
		},
		{
			MethodName: "ModifyStatus",
			Handler:    _Userer_ModifyStatus_Handler,
		},
		{
			MethodName: "ModifySecretId",
			Handler:    _Userer_ModifySecretId_Handler,
		},
		{
			MethodName: "Select",
			Handler:    _Userer_Select_Handler,
		},
		{
			MethodName: "SelectByName",
			Handler:    _Userer_SelectByName_Handler,
		},
		{
			MethodName: "SelectByPage",
			Handler:    _Userer_SelectByPage_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Userer_Delete_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Userer_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
