// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"github.com/lius-new/blog-backend/rpc/user/internal/logic"
	"github.com/lius-new/blog-backend/rpc/user/internal/svc"
	"github.com/lius-new/blog-backend/rpc/user/user"
)

type UsererServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUsererServer
}

func NewUsererServer(svcCtx *svc.ServiceContext) *UsererServer {
	return &UsererServer{
		svcCtx: svcCtx,
	}
}

func (s *UsererServer) Insert(ctx context.Context, in *user.InsertUserRequest) (*user.UserResponse, error) {
	l := logic.NewInsertLogic(ctx, s.svcCtx)
	return l.Insert(in)
}

func (s *UsererServer) Modify(ctx context.Context, in *user.ModifyUserRequest) (*user.ModifyUserResponse, error) {
	l := logic.NewModifyLogic(ctx, s.svcCtx)
	return l.Modify(in)
}

func (s *UsererServer) ModifyUserName(ctx context.Context, in *user.ModifyUserNameRequest) (*user.ModifyUserNameRequest, error) {
	l := logic.NewModifyUserNameLogic(ctx, s.svcCtx)
	return l.ModifyUserName(in)
}

func (s *UsererServer) ModifyPassword(ctx context.Context, in *user.ModifyPasswordRequest) (*user.ModifyPasswordResponse, error) {
	l := logic.NewModifyPasswordLogic(ctx, s.svcCtx)
	return l.ModifyPassword(in)
}

func (s *UsererServer) ModifyStatus(ctx context.Context, in *user.ModifyUserStatusRequest) (*user.ModifyUserStatusRequest, error) {
	l := logic.NewModifyStatusLogic(ctx, s.svcCtx)
	return l.ModifyStatus(in)
}

func (s *UsererServer) ModifySecretId(ctx context.Context, in *user.ModifySecretRequest) (*user.ModifySecretRequest, error) {
	l := logic.NewModifySecretIdLogic(ctx, s.svcCtx)
	return l.ModifySecretId(in)
}

func (s *UsererServer) Select(ctx context.Context, in *user.SelectUserRequest) (*user.UserResponse, error) {
	l := logic.NewSelectLogic(ctx, s.svcCtx)
	return l.Select(in)
}

func (s *UsererServer) SelectByName(ctx context.Context, in *user.SelectUserByUsernameRequest) (*user.UserResponse, error) {
	l := logic.NewSelectByNameLogic(ctx, s.svcCtx)
	return l.SelectByName(in)
}

func (s *UsererServer) SelectByPage(ctx context.Context, in *user.SelectUserByPageRequest) (*user.UsersResponse, error) {
	l := logic.NewSelectByPageLogic(ctx, s.svcCtx)
	return l.SelectByPage(in)
}

func (s *UsererServer) Delete(ctx context.Context, in *user.DeleteUserRequest) (*user.DeleteUserResponse, error) {
	l := logic.NewDeleteLogic(ctx, s.svcCtx)
	return l.Delete(in)
}

func (s *UsererServer) Login(ctx context.Context, in *user.LoginUserRequest) (*user.LoginResponse, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}
