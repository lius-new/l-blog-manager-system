// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: analyzer.proto

package analyzer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ================ Record  ================
// == 创建record ==
// 创建record的请求参数
type CreateRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestIp     string `protobuf:"bytes,1,opt,name=requestIp,proto3" json:"requestIp,omitempty"`
	RequestMethod string `protobuf:"bytes,2,opt,name=requestMethod,proto3" json:"requestMethod,omitempty"`
	RequestPath   string `protobuf:"bytes,3,opt,name=requestPath,proto3" json:"requestPath,omitempty"`
}

func (x *CreateRecordRequest) Reset() {
	*x = CreateRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecordRequest) ProtoMessage() {}

func (x *CreateRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecordRequest.ProtoReflect.Descriptor instead.
func (*CreateRecordRequest) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRecordRequest) GetRequestIp() string {
	if x != nil {
		return x.RequestIp
	}
	return ""
}

func (x *CreateRecordRequest) GetRequestMethod() string {
	if x != nil {
		return x.RequestMethod
	}
	return ""
}

func (x *CreateRecordRequest) GetRequestPath() string {
	if x != nil {
		return x.RequestPath
	}
	return ""
}

// 创建record的响应结果
type CreateRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateRecordResponse) Reset() {
	*x = CreateRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecordResponse) ProtoMessage() {}

func (x *CreateRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecordResponse.ProtoReflect.Descriptor instead.
func (*CreateRecordResponse) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{1}
}

// == 合并record ==
// 合并record的请求参数
type MergeRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestIp string `protobuf:"bytes,1,opt,name=requestIp,proto3" json:"requestIp,omitempty"`
}

func (x *MergeRecordRequest) Reset() {
	*x = MergeRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRecordRequest) ProtoMessage() {}

func (x *MergeRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRecordRequest.ProtoReflect.Descriptor instead.
func (*MergeRecordRequest) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{2}
}

func (x *MergeRecordRequest) GetRequestIp() string {
	if x != nil {
		return x.RequestIp
	}
	return ""
}

// 合并record的响应结果
type MergeRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MergeRecordResponse) Reset() {
	*x = MergeRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRecordResponse) ProtoMessage() {}

func (x *MergeRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRecordResponse.ProtoReflect.Descriptor instead.
func (*MergeRecordResponse) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{3}
}

// == 删除record ==
// 删除record的请求参数
type DeleteRecordByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRecordByIdRequest) Reset() {
	*x = DeleteRecordByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecordByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecordByIdRequest) ProtoMessage() {}

func (x *DeleteRecordByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecordByIdRequest.ProtoReflect.Descriptor instead.
func (*DeleteRecordByIdRequest) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteRecordByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// 删除record的响应结果
type DeleteRecordByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRecordByIdResponse) Reset() {
	*x = DeleteRecordByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecordByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecordByIdResponse) ProtoMessage() {}

func (x *DeleteRecordByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecordByIdResponse.ProtoReflect.Descriptor instead.
func (*DeleteRecordByIdResponse) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{5}
}

// == 查询record ==
// 查询record的请求参数
type SelectRecordByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SelectRecordByIdRequest) Reset() {
	*x = SelectRecordByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectRecordByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectRecordByIdRequest) ProtoMessage() {}

func (x *SelectRecordByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectRecordByIdRequest.ProtoReflect.Descriptor instead.
func (*SelectRecordByIdRequest) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{6}
}

func (x *SelectRecordByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// 查询record的响应结果
type SelectRecordByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RequestIP     string `protobuf:"bytes,2,opt,name=requestIP,proto3" json:"requestIP,omitempty"`
	RequestMethod string `protobuf:"bytes,3,opt,name=requestMethod,proto3" json:"requestMethod,omitempty"`
	RequestPath   string `protobuf:"bytes,4,opt,name=requestPath,proto3" json:"requestPath,omitempty"`
	RequestCount  int64  `protobuf:"varint,5,opt,name=requestCount,proto3" json:"requestCount,omitempty"`
	CreateAt      int64  `protobuf:"varint,6,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt      int64  `protobuf:"varint,7,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
}

func (x *SelectRecordByIdResponse) Reset() {
	*x = SelectRecordByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectRecordByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectRecordByIdResponse) ProtoMessage() {}

func (x *SelectRecordByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectRecordByIdResponse.ProtoReflect.Descriptor instead.
func (*SelectRecordByIdResponse) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{7}
}

func (x *SelectRecordByIdResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SelectRecordByIdResponse) GetRequestIP() string {
	if x != nil {
		return x.RequestIP
	}
	return ""
}

func (x *SelectRecordByIdResponse) GetRequestMethod() string {
	if x != nil {
		return x.RequestMethod
	}
	return ""
}

func (x *SelectRecordByIdResponse) GetRequestPath() string {
	if x != nil {
		return x.RequestPath
	}
	return ""
}

func (x *SelectRecordByIdResponse) GetRequestCount() int64 {
	if x != nil {
		return x.RequestCount
	}
	return 0
}

func (x *SelectRecordByIdResponse) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *SelectRecordByIdResponse) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

// == 查询record(分页) ==
type SelectRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RequestIP     string `protobuf:"bytes,2,opt,name=requestIP,proto3" json:"requestIP,omitempty"`
	RequestMethod string `protobuf:"bytes,3,opt,name=requestMethod,proto3" json:"requestMethod,omitempty"`
	RequestPath   string `protobuf:"bytes,4,opt,name=requestPath,proto3" json:"requestPath,omitempty"`
	RequestCount  int64  `protobuf:"varint,5,opt,name=requestCount,proto3" json:"requestCount,omitempty"`
	CreateAt      int64  `protobuf:"varint,6,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt      int64  `protobuf:"varint,7,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
}

func (x *SelectRecords) Reset() {
	*x = SelectRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectRecords) ProtoMessage() {}

func (x *SelectRecords) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectRecords.ProtoReflect.Descriptor instead.
func (*SelectRecords) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{8}
}

func (x *SelectRecords) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SelectRecords) GetRequestIP() string {
	if x != nil {
		return x.RequestIP
	}
	return ""
}

func (x *SelectRecords) GetRequestMethod() string {
	if x != nil {
		return x.RequestMethod
	}
	return ""
}

func (x *SelectRecords) GetRequestPath() string {
	if x != nil {
		return x.RequestPath
	}
	return ""
}

func (x *SelectRecords) GetRequestCount() int64 {
	if x != nil {
		return x.RequestCount
	}
	return 0
}

func (x *SelectRecords) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *SelectRecords) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

// 查询record的分页请求参数
type SelectRecordByPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  int64 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *SelectRecordByPageRequest) Reset() {
	*x = SelectRecordByPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectRecordByPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectRecordByPageRequest) ProtoMessage() {}

func (x *SelectRecordByPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectRecordByPageRequest.ProtoReflect.Descriptor instead.
func (*SelectRecordByPageRequest) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{9}
}

func (x *SelectRecordByPageRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *SelectRecordByPageRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 查询record的分页响应结果
type SelectRecordByPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*SelectRecords `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Total   int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SelectRecordByPageResponse) Reset() {
	*x = SelectRecordByPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectRecordByPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectRecordByPageResponse) ProtoMessage() {}

func (x *SelectRecordByPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectRecordByPageResponse.ProtoReflect.Descriptor instead.
func (*SelectRecordByPageResponse) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{10}
}

func (x *SelectRecordByPageResponse) GetRecords() []*SelectRecords {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *SelectRecordByPageResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// ================ Blocked  ================
// == 创建blocked ==
// 创建blocked 的请求参数
type CreateBlockedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockIp string `protobuf:"bytes,1,opt,name=blockIp,proto3" json:"blockIp,omitempty"`
}

func (x *CreateBlockedRequest) Reset() {
	*x = CreateBlockedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBlockedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlockedRequest) ProtoMessage() {}

func (x *CreateBlockedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlockedRequest.ProtoReflect.Descriptor instead.
func (*CreateBlockedRequest) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{11}
}

func (x *CreateBlockedRequest) GetBlockIp() string {
	if x != nil {
		return x.BlockIp
	}
	return ""
}

// 创建blocked 的响应结果
type CreateBlockedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateBlockedResponse) Reset() {
	*x = CreateBlockedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBlockedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlockedResponse) ProtoMessage() {}

func (x *CreateBlockedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlockedResponse.ProtoReflect.Descriptor instead.
func (*CreateBlockedResponse) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{12}
}

// == 更新blocked ==
// 更新blocked 的请求参数(禁止结束时间)
type ModifyBlockedWithBlockEndRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockIp  string `protobuf:"bytes,1,opt,name=blockIp,proto3" json:"blockIp,omitempty"`
	BlockEnd int64  `protobuf:"varint,2,opt,name=blockEnd,proto3" json:"blockEnd,omitempty"`
}

func (x *ModifyBlockedWithBlockEndRequest) Reset() {
	*x = ModifyBlockedWithBlockEndRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyBlockedWithBlockEndRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyBlockedWithBlockEndRequest) ProtoMessage() {}

func (x *ModifyBlockedWithBlockEndRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyBlockedWithBlockEndRequest.ProtoReflect.Descriptor instead.
func (*ModifyBlockedWithBlockEndRequest) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{13}
}

func (x *ModifyBlockedWithBlockEndRequest) GetBlockIp() string {
	if x != nil {
		return x.BlockIp
	}
	return ""
}

func (x *ModifyBlockedWithBlockEndRequest) GetBlockEnd() int64 {
	if x != nil {
		return x.BlockEnd
	}
	return 0
}

// 更新blocked 的响应结果(禁止结束时间)
type ModifyBlockedWithBlockEndResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModifyBlockedWithBlockEndResponse) Reset() {
	*x = ModifyBlockedWithBlockEndResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyBlockedWithBlockEndResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyBlockedWithBlockEndResponse) ProtoMessage() {}

func (x *ModifyBlockedWithBlockEndResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyBlockedWithBlockEndResponse.ProtoReflect.Descriptor instead.
func (*ModifyBlockedWithBlockEndResponse) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{14}
}

// == 更新blocked count ==
// 更新blocked 的请求参数
type ModifyBlockedWithBlockCountAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockIp string `protobuf:"bytes,1,opt,name=blockIp,proto3" json:"blockIp,omitempty"`
}

func (x *ModifyBlockedWithBlockCountAddRequest) Reset() {
	*x = ModifyBlockedWithBlockCountAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyBlockedWithBlockCountAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyBlockedWithBlockCountAddRequest) ProtoMessage() {}

func (x *ModifyBlockedWithBlockCountAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyBlockedWithBlockCountAddRequest.ProtoReflect.Descriptor instead.
func (*ModifyBlockedWithBlockCountAddRequest) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{15}
}

func (x *ModifyBlockedWithBlockCountAddRequest) GetBlockIp() string {
	if x != nil {
		return x.BlockIp
	}
	return ""
}

// 更新blocked 的响应结果
type ModifyBlockedWithBlockCountAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModifyBlockedWithBlockCountAddResponse) Reset() {
	*x = ModifyBlockedWithBlockCountAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyBlockedWithBlockCountAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyBlockedWithBlockCountAddResponse) ProtoMessage() {}

func (x *ModifyBlockedWithBlockCountAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyBlockedWithBlockCountAddResponse.ProtoReflect.Descriptor instead.
func (*ModifyBlockedWithBlockCountAddResponse) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{16}
}

// == 删除blocked ==
// 删除blocked 的请求参数
type DeleteBlockedWithBlockIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockIp string `protobuf:"bytes,1,opt,name=blockIp,proto3" json:"blockIp,omitempty"`
}

func (x *DeleteBlockedWithBlockIPRequest) Reset() {
	*x = DeleteBlockedWithBlockIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBlockedWithBlockIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBlockedWithBlockIPRequest) ProtoMessage() {}

func (x *DeleteBlockedWithBlockIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBlockedWithBlockIPRequest.ProtoReflect.Descriptor instead.
func (*DeleteBlockedWithBlockIPRequest) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteBlockedWithBlockIPRequest) GetBlockIp() string {
	if x != nil {
		return x.BlockIp
	}
	return ""
}

// 删除blocked 的响应结果
type DeleteBlockedWithBlockIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteBlockedWithBlockIPResponse) Reset() {
	*x = DeleteBlockedWithBlockIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBlockedWithBlockIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBlockedWithBlockIPResponse) ProtoMessage() {}

func (x *DeleteBlockedWithBlockIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBlockedWithBlockIPResponse.ProtoReflect.Descriptor instead.
func (*DeleteBlockedWithBlockIPResponse) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{18}
}

// == 查询blocked ==
// 查询blocked 的请求参数
type SelectBlockedByBlockIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockIp string `protobuf:"bytes,1,opt,name=blockIp,proto3" json:"blockIp,omitempty"`
}

func (x *SelectBlockedByBlockIPRequest) Reset() {
	*x = SelectBlockedByBlockIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectBlockedByBlockIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectBlockedByBlockIPRequest) ProtoMessage() {}

func (x *SelectBlockedByBlockIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectBlockedByBlockIPRequest.ProtoReflect.Descriptor instead.
func (*SelectBlockedByBlockIPRequest) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{19}
}

func (x *SelectBlockedByBlockIPRequest) GetBlockIp() string {
	if x != nil {
		return x.BlockIp
	}
	return ""
}

// 查询blocked 的响应结果
type SelectBlockedByBlockIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BlockIP    string `protobuf:"bytes,2,opt,name=blockIP,proto3" json:"blockIP,omitempty"`
	BlockEnd   int64  `protobuf:"varint,3,opt,name=blockEnd,proto3" json:"blockEnd,omitempty"`
	BlockCount int64  `protobuf:"varint,4,opt,name=blockCount,proto3" json:"blockCount,omitempty"`
	CreateAt   int64  `protobuf:"varint,5,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt   int64  `protobuf:"varint,6,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
}

func (x *SelectBlockedByBlockIPResponse) Reset() {
	*x = SelectBlockedByBlockIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectBlockedByBlockIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectBlockedByBlockIPResponse) ProtoMessage() {}

func (x *SelectBlockedByBlockIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectBlockedByBlockIPResponse.ProtoReflect.Descriptor instead.
func (*SelectBlockedByBlockIPResponse) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{20}
}

func (x *SelectBlockedByBlockIPResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SelectBlockedByBlockIPResponse) GetBlockIP() string {
	if x != nil {
		return x.BlockIP
	}
	return ""
}

func (x *SelectBlockedByBlockIPResponse) GetBlockEnd() int64 {
	if x != nil {
		return x.BlockEnd
	}
	return 0
}

func (x *SelectBlockedByBlockIPResponse) GetBlockCount() int64 {
	if x != nil {
		return x.BlockCount
	}
	return 0
}

func (x *SelectBlockedByBlockIPResponse) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *SelectBlockedByBlockIPResponse) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

// == 查询blocked(根据id查询) ==
// 查询blocked 的请求参数
type SelectBlockedByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SelectBlockedByIdRequest) Reset() {
	*x = SelectBlockedByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectBlockedByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectBlockedByIdRequest) ProtoMessage() {}

func (x *SelectBlockedByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectBlockedByIdRequest.ProtoReflect.Descriptor instead.
func (*SelectBlockedByIdRequest) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{21}
}

func (x *SelectBlockedByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// 查询blocked 的响应结果
type SelectBlockedByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BlockIP    string `protobuf:"bytes,2,opt,name=blockIP,proto3" json:"blockIP,omitempty"`
	BlockEnd   int64  `protobuf:"varint,3,opt,name=blockEnd,proto3" json:"blockEnd,omitempty"`
	BlockCount int64  `protobuf:"varint,4,opt,name=blockCount,proto3" json:"blockCount,omitempty"`
	CreateAt   int64  `protobuf:"varint,5,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt   int64  `protobuf:"varint,6,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
}

func (x *SelectBlockedByIdResponse) Reset() {
	*x = SelectBlockedByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectBlockedByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectBlockedByIdResponse) ProtoMessage() {}

func (x *SelectBlockedByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectBlockedByIdResponse.ProtoReflect.Descriptor instead.
func (*SelectBlockedByIdResponse) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{22}
}

func (x *SelectBlockedByIdResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SelectBlockedByIdResponse) GetBlockIP() string {
	if x != nil {
		return x.BlockIP
	}
	return ""
}

func (x *SelectBlockedByIdResponse) GetBlockEnd() int64 {
	if x != nil {
		return x.BlockEnd
	}
	return 0
}

func (x *SelectBlockedByIdResponse) GetBlockCount() int64 {
	if x != nil {
		return x.BlockCount
	}
	return 0
}

func (x *SelectBlockedByIdResponse) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *SelectBlockedByIdResponse) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

// == 查询blocked(分页) ==
type SelectBlockeds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BlockIP    string `protobuf:"bytes,2,opt,name=blockIP,proto3" json:"blockIP,omitempty"`
	BlockEnd   int64  `protobuf:"varint,3,opt,name=blockEnd,proto3" json:"blockEnd,omitempty"`
	BlockCount int64  `protobuf:"varint,4,opt,name=blockCount,proto3" json:"blockCount,omitempty"`
	CreateAt   int64  `protobuf:"varint,5,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt   int64  `protobuf:"varint,6,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
}

func (x *SelectBlockeds) Reset() {
	*x = SelectBlockeds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectBlockeds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectBlockeds) ProtoMessage() {}

func (x *SelectBlockeds) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectBlockeds.ProtoReflect.Descriptor instead.
func (*SelectBlockeds) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{23}
}

func (x *SelectBlockeds) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SelectBlockeds) GetBlockIP() string {
	if x != nil {
		return x.BlockIP
	}
	return ""
}

func (x *SelectBlockeds) GetBlockEnd() int64 {
	if x != nil {
		return x.BlockEnd
	}
	return 0
}

func (x *SelectBlockeds) GetBlockCount() int64 {
	if x != nil {
		return x.BlockCount
	}
	return 0
}

func (x *SelectBlockeds) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *SelectBlockeds) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

// 查询blocked 的请求参数
type SelectBlockedByPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  int64 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *SelectBlockedByPageRequest) Reset() {
	*x = SelectBlockedByPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectBlockedByPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectBlockedByPageRequest) ProtoMessage() {}

func (x *SelectBlockedByPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectBlockedByPageRequest.ProtoReflect.Descriptor instead.
func (*SelectBlockedByPageRequest) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{24}
}

func (x *SelectBlockedByPageRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *SelectBlockedByPageRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 查询blocked 的响应结果
type SelectBlockedByPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blockeds []*SelectBlockeds `protobuf:"bytes,1,rep,name=blockeds,proto3" json:"blockeds,omitempty"`
	Total    int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SelectBlockedByPageResponse) Reset() {
	*x = SelectBlockedByPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectBlockedByPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectBlockedByPageResponse) ProtoMessage() {}

func (x *SelectBlockedByPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectBlockedByPageResponse.ProtoReflect.Descriptor instead.
func (*SelectBlockedByPageResponse) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{25}
}

func (x *SelectBlockedByPageResponse) GetBlockeds() []*SelectBlockeds {
	if x != nil {
		return x.Blockeds
	}
	return nil
}

func (x *SelectBlockedByPageResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// == 查询blocked(分页) ==
type JudgeBlockedByIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockIP string `protobuf:"bytes,1,opt,name=blockIP,proto3" json:"blockIP,omitempty"`
}

func (x *JudgeBlockedByIPRequest) Reset() {
	*x = JudgeBlockedByIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeBlockedByIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeBlockedByIPRequest) ProtoMessage() {}

func (x *JudgeBlockedByIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeBlockedByIPRequest.ProtoReflect.Descriptor instead.
func (*JudgeBlockedByIPRequest) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{26}
}

func (x *JudgeBlockedByIPRequest) GetBlockIP() string {
	if x != nil {
		return x.BlockIP
	}
	return ""
}

type JudgeBlockedByIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block bool `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *JudgeBlockedByIPResponse) Reset() {
	*x = JudgeBlockedByIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeBlockedByIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeBlockedByIPResponse) ProtoMessage() {}

func (x *JudgeBlockedByIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeBlockedByIPResponse.ProtoReflect.Descriptor instead.
func (*JudgeBlockedByIPResponse) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{27}
}

func (x *JudgeBlockedByIPResponse) GetBlock() bool {
	if x != nil {
		return x.Block
	}
	return false
}

var File_analyzer_proto protoreflect.FileDescriptor

var file_analyzer_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x22, 0x7b, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x70, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x32, 0x0a, 0x12, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x70, 0x22, 0x15, 0x0a, 0x13, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x29, 0x0a, 0x17, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xec, 0x01, 0x0a,
	0x18, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x50, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x0d,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x50, 0x12, 0x24, 0x0a, 0x0d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22,
	0x51, 0x0a, 0x19, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x79, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x65, 0x0a, 0x1a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x30, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x70, 0x22, 0x17, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x20, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x22, 0x23,
	0x0a, 0x21, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x41, 0x0a, 0x25, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x70, 0x22, 0x28, 0x0a, 0x26, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3b, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x70, 0x22, 0x22, 0x0a,
	0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x39, 0x0a, 0x1d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x70, 0x22, 0xbe, 0x01, 0x0a,
	0x1e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x2a, 0x0a,
	0x18, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x19, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x50, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x52, 0x0a, 0x1a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x69, 0x0a, 0x1b, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x73, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x33, 0x0a, 0x17, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x50, 0x22, 0x30, 0x0a, 0x18, 0x4a, 0x75,
	0x64, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x49, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x32, 0x87, 0x0a, 0x0a,
	0x08, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72,
	0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x21, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x10, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x21, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x23, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1e, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a,
	0x19, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x2a, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x1e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x12, 0x2f, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x18, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x50, 0x12, 0x29, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x16,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x50, 0x12, 0x27, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42,
	0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x12, 0x24,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x4a,
	0x75, 0x64, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x49, 0x50, 0x12,
	0x21, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4a, 0x75,
	0x64, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x49, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_analyzer_proto_rawDescOnce sync.Once
	file_analyzer_proto_rawDescData = file_analyzer_proto_rawDesc
)

func file_analyzer_proto_rawDescGZIP() []byte {
	file_analyzer_proto_rawDescOnce.Do(func() {
		file_analyzer_proto_rawDescData = protoimpl.X.CompressGZIP(file_analyzer_proto_rawDescData)
	})
	return file_analyzer_proto_rawDescData
}

var file_analyzer_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_analyzer_proto_goTypes = []interface{}{
	(*CreateRecordRequest)(nil),                    // 0: analyzer.CreateRecordRequest
	(*CreateRecordResponse)(nil),                   // 1: analyzer.CreateRecordResponse
	(*MergeRecordRequest)(nil),                     // 2: analyzer.MergeRecordRequest
	(*MergeRecordResponse)(nil),                    // 3: analyzer.MergeRecordResponse
	(*DeleteRecordByIdRequest)(nil),                // 4: analyzer.DeleteRecordByIdRequest
	(*DeleteRecordByIdResponse)(nil),               // 5: analyzer.DeleteRecordByIdResponse
	(*SelectRecordByIdRequest)(nil),                // 6: analyzer.SelectRecordByIdRequest
	(*SelectRecordByIdResponse)(nil),               // 7: analyzer.SelectRecordByIdResponse
	(*SelectRecords)(nil),                          // 8: analyzer.SelectRecords
	(*SelectRecordByPageRequest)(nil),              // 9: analyzer.SelectRecordByPageRequest
	(*SelectRecordByPageResponse)(nil),             // 10: analyzer.SelectRecordByPageResponse
	(*CreateBlockedRequest)(nil),                   // 11: analyzer.CreateBlockedRequest
	(*CreateBlockedResponse)(nil),                  // 12: analyzer.CreateBlockedResponse
	(*ModifyBlockedWithBlockEndRequest)(nil),       // 13: analyzer.ModifyBlockedWithBlockEndRequest
	(*ModifyBlockedWithBlockEndResponse)(nil),      // 14: analyzer.ModifyBlockedWithBlockEndResponse
	(*ModifyBlockedWithBlockCountAddRequest)(nil),  // 15: analyzer.ModifyBlockedWithBlockCountAddRequest
	(*ModifyBlockedWithBlockCountAddResponse)(nil), // 16: analyzer.ModifyBlockedWithBlockCountAddResponse
	(*DeleteBlockedWithBlockIPRequest)(nil),        // 17: analyzer.DeleteBlockedWithBlockIPRequest
	(*DeleteBlockedWithBlockIPResponse)(nil),       // 18: analyzer.DeleteBlockedWithBlockIPResponse
	(*SelectBlockedByBlockIPRequest)(nil),          // 19: analyzer.SelectBlockedByBlockIPRequest
	(*SelectBlockedByBlockIPResponse)(nil),         // 20: analyzer.SelectBlockedByBlockIPResponse
	(*SelectBlockedByIdRequest)(nil),               // 21: analyzer.SelectBlockedByIdRequest
	(*SelectBlockedByIdResponse)(nil),              // 22: analyzer.SelectBlockedByIdResponse
	(*SelectBlockeds)(nil),                         // 23: analyzer.SelectBlockeds
	(*SelectBlockedByPageRequest)(nil),             // 24: analyzer.SelectBlockedByPageRequest
	(*SelectBlockedByPageResponse)(nil),            // 25: analyzer.SelectBlockedByPageResponse
	(*JudgeBlockedByIPRequest)(nil),                // 26: analyzer.JudgeBlockedByIPRequest
	(*JudgeBlockedByIPResponse)(nil),               // 27: analyzer.JudgeBlockedByIPResponse
}
var file_analyzer_proto_depIdxs = []int32{
	8,  // 0: analyzer.SelectRecordByPageResponse.records:type_name -> analyzer.SelectRecords
	23, // 1: analyzer.SelectBlockedByPageResponse.blockeds:type_name -> analyzer.SelectBlockeds
	0,  // 2: analyzer.Analyzer.CreateRecord:input_type -> analyzer.CreateRecordRequest
	2,  // 3: analyzer.Analyzer.MergeRecord:input_type -> analyzer.MergeRecordRequest
	4,  // 4: analyzer.Analyzer.DeleteRecordById:input_type -> analyzer.DeleteRecordByIdRequest
	6,  // 5: analyzer.Analyzer.SelectRecordById:input_type -> analyzer.SelectRecordByIdRequest
	9,  // 6: analyzer.Analyzer.SelectRecordByPage:input_type -> analyzer.SelectRecordByPageRequest
	11, // 7: analyzer.Analyzer.CreateBlocked:input_type -> analyzer.CreateBlockedRequest
	13, // 8: analyzer.Analyzer.ModifyBlockedWithBlockEnd:input_type -> analyzer.ModifyBlockedWithBlockEndRequest
	15, // 9: analyzer.Analyzer.ModifyBlockedWithBlockCountAdd:input_type -> analyzer.ModifyBlockedWithBlockCountAddRequest
	17, // 10: analyzer.Analyzer.DeleteBlockedWithBlockIP:input_type -> analyzer.DeleteBlockedWithBlockIPRequest
	19, // 11: analyzer.Analyzer.SelectBlockedByBlockIP:input_type -> analyzer.SelectBlockedByBlockIPRequest
	21, // 12: analyzer.Analyzer.SelectBlockedById:input_type -> analyzer.SelectBlockedByIdRequest
	24, // 13: analyzer.Analyzer.SelectBlockedByPage:input_type -> analyzer.SelectBlockedByPageRequest
	26, // 14: analyzer.Analyzer.JudgeBlockedByIP:input_type -> analyzer.JudgeBlockedByIPRequest
	1,  // 15: analyzer.Analyzer.CreateRecord:output_type -> analyzer.CreateRecordResponse
	3,  // 16: analyzer.Analyzer.MergeRecord:output_type -> analyzer.MergeRecordResponse
	5,  // 17: analyzer.Analyzer.DeleteRecordById:output_type -> analyzer.DeleteRecordByIdResponse
	7,  // 18: analyzer.Analyzer.SelectRecordById:output_type -> analyzer.SelectRecordByIdResponse
	10, // 19: analyzer.Analyzer.SelectRecordByPage:output_type -> analyzer.SelectRecordByPageResponse
	12, // 20: analyzer.Analyzer.CreateBlocked:output_type -> analyzer.CreateBlockedResponse
	14, // 21: analyzer.Analyzer.ModifyBlockedWithBlockEnd:output_type -> analyzer.ModifyBlockedWithBlockEndResponse
	16, // 22: analyzer.Analyzer.ModifyBlockedWithBlockCountAdd:output_type -> analyzer.ModifyBlockedWithBlockCountAddResponse
	18, // 23: analyzer.Analyzer.DeleteBlockedWithBlockIP:output_type -> analyzer.DeleteBlockedWithBlockIPResponse
	20, // 24: analyzer.Analyzer.SelectBlockedByBlockIP:output_type -> analyzer.SelectBlockedByBlockIPResponse
	22, // 25: analyzer.Analyzer.SelectBlockedById:output_type -> analyzer.SelectBlockedByIdResponse
	25, // 26: analyzer.Analyzer.SelectBlockedByPage:output_type -> analyzer.SelectBlockedByPageResponse
	27, // 27: analyzer.Analyzer.JudgeBlockedByIP:output_type -> analyzer.JudgeBlockedByIPResponse
	15, // [15:28] is the sub-list for method output_type
	2,  // [2:15] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_analyzer_proto_init() }
func file_analyzer_proto_init() {
	if File_analyzer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_analyzer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecordByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecordByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectRecordByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectRecordByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectRecordByPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectRecordByPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBlockedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBlockedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyBlockedWithBlockEndRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyBlockedWithBlockEndResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyBlockedWithBlockCountAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyBlockedWithBlockCountAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBlockedWithBlockIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBlockedWithBlockIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectBlockedByBlockIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectBlockedByBlockIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectBlockedByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectBlockedByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectBlockeds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectBlockedByPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectBlockedByPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JudgeBlockedByIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JudgeBlockedByIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_analyzer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_analyzer_proto_goTypes,
		DependencyIndexes: file_analyzer_proto_depIdxs,
		MessageInfos:      file_analyzer_proto_msgTypes,
	}.Build()
	File_analyzer_proto = out.File
	file_analyzer_proto_rawDesc = nil
	file_analyzer_proto_goTypes = nil
	file_analyzer_proto_depIdxs = nil
}
