// Code generated by goctl. DO NOT EDIT.
// Source: analyzer.proto

package server

import (
	"context"

	"github.com/lius-new/blog-backend/rpc/analyzer/analyzer"
	"github.com/lius-new/blog-backend/rpc/analyzer/internal/logic"
	"github.com/lius-new/blog-backend/rpc/analyzer/internal/svc"
)

type AnalyzerServer struct {
	svcCtx *svc.ServiceContext
	analyzer.UnimplementedAnalyzerServer
}

func NewAnalyzerServer(svcCtx *svc.ServiceContext) *AnalyzerServer {
	return &AnalyzerServer{
		svcCtx: svcCtx,
	}
}

// ================ Record  ================
func (s *AnalyzerServer) CreateRecord(ctx context.Context, in *analyzer.CreateRecordRequest) (*analyzer.CreateRecordResponse, error) {
	l := logic.NewCreateRecordLogic(ctx, s.svcCtx)
	return l.CreateRecord(in)
}

func (s *AnalyzerServer) MergeRecord(ctx context.Context, in *analyzer.MergeRecordRequest) (*analyzer.MergeRecordResponse, error) {
	l := logic.NewMergeRecordLogic(ctx, s.svcCtx)
	return l.MergeRecord(in)
}

func (s *AnalyzerServer) DeleteRecordById(ctx context.Context, in *analyzer.DeleteRecordByIdRequest) (*analyzer.DeleteRecordByIdResponse, error) {
	l := logic.NewDeleteRecordByIdLogic(ctx, s.svcCtx)
	return l.DeleteRecordById(in)
}

func (s *AnalyzerServer) SelectRecordById(ctx context.Context, in *analyzer.SelectRecordByIdRequest) (*analyzer.SelectRecordByIdResponse, error) {
	l := logic.NewSelectRecordByIdLogic(ctx, s.svcCtx)
	return l.SelectRecordById(in)
}

func (s *AnalyzerServer) SelectRecordByPage(ctx context.Context, in *analyzer.SelectRecordByPageRequest) (*analyzer.SelectRecordByPageResponse, error) {
	l := logic.NewSelectRecordByPageLogic(ctx, s.svcCtx)
	return l.SelectRecordByPage(in)
}

// ================ Blocked  ================
func (s *AnalyzerServer) CreateBlocked(ctx context.Context, in *analyzer.CreateBlockedRequest) (*analyzer.CreateBlockedResponse, error) {
	l := logic.NewCreateBlockedLogic(ctx, s.svcCtx)
	return l.CreateBlocked(in)
}

func (s *AnalyzerServer) ModifyBlockedWithBlockEnd(ctx context.Context, in *analyzer.ModifyBlockedWithBlockEndRequest) (*analyzer.ModifyBlockedWithBlockEndResponse, error) {
	l := logic.NewModifyBlockedWithBlockEndLogic(ctx, s.svcCtx)
	return l.ModifyBlockedWithBlockEnd(in)
}

func (s *AnalyzerServer) ModifyBlockedWithBlockCountAdd(ctx context.Context, in *analyzer.ModifyBlockedWithBlockCountAddRequest) (*analyzer.ModifyBlockedWithBlockCountAddResponse, error) {
	l := logic.NewModifyBlockedWithBlockCountAddLogic(ctx, s.svcCtx)
	return l.ModifyBlockedWithBlockCountAdd(in)
}

func (s *AnalyzerServer) DeleteBlockedWithBlockIP(ctx context.Context, in *analyzer.DeleteBlockedWithBlockIPRequest) (*analyzer.DeleteBlockedWithBlockIPResponse, error) {
	l := logic.NewDeleteBlockedWithBlockIPLogic(ctx, s.svcCtx)
	return l.DeleteBlockedWithBlockIP(in)
}

func (s *AnalyzerServer) SelectBlockedByBlockIP(ctx context.Context, in *analyzer.SelectBlockedByBlockIPRequest) (*analyzer.SelectBlockedByBlockIPResponse, error) {
	l := logic.NewSelectBlockedByBlockIPLogic(ctx, s.svcCtx)
	return l.SelectBlockedByBlockIP(in)
}

func (s *AnalyzerServer) SelectBlockedById(ctx context.Context, in *analyzer.SelectBlockedByIdRequest) (*analyzer.SelectBlockedByIdResponse, error) {
	l := logic.NewSelectBlockedByIdLogic(ctx, s.svcCtx)
	return l.SelectBlockedById(in)
}

func (s *AnalyzerServer) SelectBlockedByPage(ctx context.Context, in *analyzer.SelectBlockedByPageRequest) (*analyzer.SelectBlockedByPageResponse, error) {
	l := logic.NewSelectBlockedByPageLogic(ctx, s.svcCtx)
	return l.SelectBlockedByPage(in)
}

// 判断是否被封禁
func (s *AnalyzerServer) JudgeBlockedByIP(ctx context.Context, in *analyzer.JudgeBlockedByIPRequest) (*analyzer.JudgeBlockedByIPResponse, error) {
	l := logic.NewJudgeBlockedByIPLogic(ctx, s.svcCtx)
	return l.JudgeBlockedByIP(in)
}
