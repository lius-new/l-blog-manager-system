// Code generated by goctl. DO NOT EDIT.
// Source: analyzer.proto

package analyzerclient

import (
	"context"

	"github.com/lius-new/blog-backend/rpc/analyzer/analyzer"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateBlockedRequest                   = analyzer.CreateBlockedRequest
	CreateBlockedResponse                  = analyzer.CreateBlockedResponse
	CreateRecordRequest                    = analyzer.CreateRecordRequest
	CreateRecordResponse                   = analyzer.CreateRecordResponse
	DeleteBlockedWithBlockIPRequest        = analyzer.DeleteBlockedWithBlockIPRequest
	DeleteBlockedWithBlockIPResponse       = analyzer.DeleteBlockedWithBlockIPResponse
	DeleteRecordByIdRequest                = analyzer.DeleteRecordByIdRequest
	DeleteRecordByIdResponse               = analyzer.DeleteRecordByIdResponse
	MergeRecordRequest                     = analyzer.MergeRecordRequest
	MergeRecordResponse                    = analyzer.MergeRecordResponse
	ModifyBlockedWithBlockCountAddRequest  = analyzer.ModifyBlockedWithBlockCountAddRequest
	ModifyBlockedWithBlockCountAddResponse = analyzer.ModifyBlockedWithBlockCountAddResponse
	ModifyBlockedWithBlockEndRequest       = analyzer.ModifyBlockedWithBlockEndRequest
	ModifyBlockedWithBlockEndResponse      = analyzer.ModifyBlockedWithBlockEndResponse
	ModifyRecordRequest                    = analyzer.ModifyRecordRequest
	ModifyRecordResponse                   = analyzer.ModifyRecordResponse
	SelectBlockedByBlockIPRequest          = analyzer.SelectBlockedByBlockIPRequest
	SelectBlockedByBlockIPResponse         = analyzer.SelectBlockedByBlockIPResponse
	SelectBlockedByIdRequest               = analyzer.SelectBlockedByIdRequest
	SelectBlockedByIdResponse              = analyzer.SelectBlockedByIdResponse
	SelectBlockedByPageRequest             = analyzer.SelectBlockedByPageRequest
	SelectBlockedByPageResponse            = analyzer.SelectBlockedByPageResponse
	SelectBlockeds                         = analyzer.SelectBlockeds
	SelectRecordByIdRequest                = analyzer.SelectRecordByIdRequest
	SelectRecordByIdResponse               = analyzer.SelectRecordByIdResponse
	SelectRecordByPageRequest              = analyzer.SelectRecordByPageRequest
	SelectRecordByPageResponse             = analyzer.SelectRecordByPageResponse
	SelectRecords                          = analyzer.SelectRecords

	Analyzer interface {
		// ================ Record  ================
		CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error)
		ModifyRecord(ctx context.Context, in *ModifyRecordRequest, opts ...grpc.CallOption) (*ModifyRecordResponse, error)
		MergeRecord(ctx context.Context, in *MergeRecordRequest, opts ...grpc.CallOption) (*MergeRecordResponse, error)
		DeleteRecordById(ctx context.Context, in *DeleteRecordByIdRequest, opts ...grpc.CallOption) (*DeleteRecordByIdResponse, error)
		SelectRecordById(ctx context.Context, in *SelectRecordByIdRequest, opts ...grpc.CallOption) (*SelectRecordByIdResponse, error)
		SelectRecordByPage(ctx context.Context, in *SelectRecordByPageRequest, opts ...grpc.CallOption) (*SelectRecordByPageResponse, error)
		// ================ Blocked  ================
		CreateBlocked(ctx context.Context, in *CreateBlockedRequest, opts ...grpc.CallOption) (*CreateBlockedResponse, error)
		ModifyBlockedWithBlockEnd(ctx context.Context, in *ModifyBlockedWithBlockEndRequest, opts ...grpc.CallOption) (*ModifyBlockedWithBlockEndResponse, error)
		ModifyBlockedWithBlockCountAdd(ctx context.Context, in *ModifyBlockedWithBlockCountAddRequest, opts ...grpc.CallOption) (*ModifyBlockedWithBlockCountAddResponse, error)
		DeleteBlockedWithBlockIP(ctx context.Context, in *DeleteBlockedWithBlockIPRequest, opts ...grpc.CallOption) (*DeleteBlockedWithBlockIPResponse, error)
		SelectBlockedByBlockIP(ctx context.Context, in *SelectBlockedByBlockIPRequest, opts ...grpc.CallOption) (*SelectBlockedByBlockIPResponse, error)
		SelectBlockedById(ctx context.Context, in *SelectBlockedByIdRequest, opts ...grpc.CallOption) (*SelectBlockedByIdResponse, error)
		SelectBlockedByPage(ctx context.Context, in *SelectBlockedByPageRequest, opts ...grpc.CallOption) (*SelectBlockedByPageResponse, error)
	}

	defaultAnalyzer struct {
		cli zrpc.Client
	}
)

func NewAnalyzer(cli zrpc.Client) Analyzer {
	return &defaultAnalyzer{
		cli: cli,
	}
}

// ================ Record  ================
func (m *defaultAnalyzer) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error) {
	client := analyzer.NewAnalyzerClient(m.cli.Conn())
	return client.CreateRecord(ctx, in, opts...)
}

func (m *defaultAnalyzer) ModifyRecord(ctx context.Context, in *ModifyRecordRequest, opts ...grpc.CallOption) (*ModifyRecordResponse, error) {
	client := analyzer.NewAnalyzerClient(m.cli.Conn())
	return client.ModifyRecord(ctx, in, opts...)
}

func (m *defaultAnalyzer) MergeRecord(ctx context.Context, in *MergeRecordRequest, opts ...grpc.CallOption) (*MergeRecordResponse, error) {
	client := analyzer.NewAnalyzerClient(m.cli.Conn())
	return client.MergeRecord(ctx, in, opts...)
}

func (m *defaultAnalyzer) DeleteRecordById(ctx context.Context, in *DeleteRecordByIdRequest, opts ...grpc.CallOption) (*DeleteRecordByIdResponse, error) {
	client := analyzer.NewAnalyzerClient(m.cli.Conn())
	return client.DeleteRecordById(ctx, in, opts...)
}

func (m *defaultAnalyzer) SelectRecordById(ctx context.Context, in *SelectRecordByIdRequest, opts ...grpc.CallOption) (*SelectRecordByIdResponse, error) {
	client := analyzer.NewAnalyzerClient(m.cli.Conn())
	return client.SelectRecordById(ctx, in, opts...)
}

func (m *defaultAnalyzer) SelectRecordByPage(ctx context.Context, in *SelectRecordByPageRequest, opts ...grpc.CallOption) (*SelectRecordByPageResponse, error) {
	client := analyzer.NewAnalyzerClient(m.cli.Conn())
	return client.SelectRecordByPage(ctx, in, opts...)
}

// ================ Blocked  ================
func (m *defaultAnalyzer) CreateBlocked(ctx context.Context, in *CreateBlockedRequest, opts ...grpc.CallOption) (*CreateBlockedResponse, error) {
	client := analyzer.NewAnalyzerClient(m.cli.Conn())
	return client.CreateBlocked(ctx, in, opts...)
}

func (m *defaultAnalyzer) ModifyBlockedWithBlockEnd(ctx context.Context, in *ModifyBlockedWithBlockEndRequest, opts ...grpc.CallOption) (*ModifyBlockedWithBlockEndResponse, error) {
	client := analyzer.NewAnalyzerClient(m.cli.Conn())
	return client.ModifyBlockedWithBlockEnd(ctx, in, opts...)
}

func (m *defaultAnalyzer) ModifyBlockedWithBlockCountAdd(ctx context.Context, in *ModifyBlockedWithBlockCountAddRequest, opts ...grpc.CallOption) (*ModifyBlockedWithBlockCountAddResponse, error) {
	client := analyzer.NewAnalyzerClient(m.cli.Conn())
	return client.ModifyBlockedWithBlockCountAdd(ctx, in, opts...)
}

func (m *defaultAnalyzer) DeleteBlockedWithBlockIP(ctx context.Context, in *DeleteBlockedWithBlockIPRequest, opts ...grpc.CallOption) (*DeleteBlockedWithBlockIPResponse, error) {
	client := analyzer.NewAnalyzerClient(m.cli.Conn())
	return client.DeleteBlockedWithBlockIP(ctx, in, opts...)
}

func (m *defaultAnalyzer) SelectBlockedByBlockIP(ctx context.Context, in *SelectBlockedByBlockIPRequest, opts ...grpc.CallOption) (*SelectBlockedByBlockIPResponse, error) {
	client := analyzer.NewAnalyzerClient(m.cli.Conn())
	return client.SelectBlockedByBlockIP(ctx, in, opts...)
}

func (m *defaultAnalyzer) SelectBlockedById(ctx context.Context, in *SelectBlockedByIdRequest, opts ...grpc.CallOption) (*SelectBlockedByIdResponse, error) {
	client := analyzer.NewAnalyzerClient(m.cli.Conn())
	return client.SelectBlockedById(ctx, in, opts...)
}

func (m *defaultAnalyzer) SelectBlockedByPage(ctx context.Context, in *SelectBlockedByPageRequest, opts ...grpc.CallOption) (*SelectBlockedByPageResponse, error) {
	client := analyzer.NewAnalyzerClient(m.cli.Conn())
	return client.SelectBlockedByPage(ctx, in, opts...)
}
