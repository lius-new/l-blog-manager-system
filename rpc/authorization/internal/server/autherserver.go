// Code generated by goctl. DO NOT EDIT.
// Source: authorization.proto

package server

import (
	"context"

	"github.com/lius-new/blog-backend/rpc/authorization/authorization"
	"github.com/lius-new/blog-backend/rpc/authorization/internal/logic"
	"github.com/lius-new/blog-backend/rpc/authorization/internal/svc"
)

type AutherServer struct {
	svcCtx *svc.ServiceContext
	authorization.UnimplementedAutherServer
}

func NewAutherServer(svcCtx *svc.ServiceContext) *AutherServer {
	return &AutherServer{
		svcCtx: svcCtx,
	}
}

// 校验token
func (s *AutherServer) JudgeToken(ctx context.Context, in *authorization.JudgeJwtRequestWithJwt) (*authorization.JudgeJwtResponseWithJwt, error) {
	l := logic.NewJudgeTokenLogic(ctx, s.svcCtx)
	return l.JudgeToken(in)
}

// 生成token
func (s *AutherServer) GenerateToken(ctx context.Context, in *authorization.GenerateJwtRequestWithJwt) (*authorization.GenerateJwtResponseWithJwt, error) {
	l := logic.NewGenerateTokenLogic(ctx, s.svcCtx)
	return l.GenerateToken(in)
}

// 新增secret
func (s *AutherServer) InsertSecret(ctx context.Context, in *authorization.InsertAndUpdateSecretRequestWithSecret) (*authorization.SecretResponseWithSecret, error) {
	l := logic.NewInsertSecretLogic(ctx, s.svcCtx)
	return l.InsertSecret(in)
}

// 更新secret
func (s *AutherServer) UpdateSecret(ctx context.Context, in *authorization.InsertAndUpdateSecretRequestWithSecret) (*authorization.SecretResponseWithSecret, error) {
	l := logic.NewUpdateSecretLogic(ctx, s.svcCtx)
	return l.UpdateSecret(in)
}

// 为指定用户生成secret
func (s *AutherServer) GenerateSecret(ctx context.Context, in *authorization.GenerateSecretRequestWithSecret) (*authorization.SecretResponseWithSecret, error) {
	l := logic.NewGenerateSecretLogic(ctx, s.svcCtx)
	return l.GenerateSecret(in)
}

// 删除secret
func (s *AutherServer) DeleteSecret(ctx context.Context, in *authorization.DeleteSecretRequestWithSecret) (*authorization.DeleteSecretResponseWithSecret, error) {
	l := logic.NewDeleteSecretLogic(ctx, s.svcCtx)
	return l.DeleteSecret(in)
}

// 查询secret
func (s *AutherServer) SelectSecret(ctx context.Context, in *authorization.SelectSecretRequestWithSecret) (*authorization.SecretResponseWithSecret, error) {
	l := logic.NewSelectSecretLogic(ctx, s.svcCtx)
	return l.SelectSecret(in)
}
