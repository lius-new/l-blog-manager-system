// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: authorization.proto

package authorization

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AutherClient is the client API for Auther service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutherClient interface {
	// 校验token
	JudgeToken(ctx context.Context, in *JudgeJwtRequestWithJwt, opts ...grpc.CallOption) (*JudgeJwtResponseWithJwt, error)
	// 生成token
	GenerateToken(ctx context.Context, in *GenerateJwtRequestWithJwt, opts ...grpc.CallOption) (*GenerateJwtResponseWithJwt, error)
	// 新增secret
	InsertSecret(ctx context.Context, in *InsertAndUpdateSecretRequestWithSecret, opts ...grpc.CallOption) (*SecretResponseWithSecret, error)
	// 更新secret
	UpdateSecret(ctx context.Context, in *InsertAndUpdateSecretRequestWithSecret, opts ...grpc.CallOption) (*SecretResponseWithSecret, error)
	// 为指定用户生成secret
	GenerateSecret(ctx context.Context, in *GenerateSecretRequestWithSecret, opts ...grpc.CallOption) (*SecretResponseWithSecret, error)
	// 删除secret
	DeleteSecret(ctx context.Context, in *DeleteSecretRequestWithSecret, opts ...grpc.CallOption) (*DeleteSecretResponseWithSecret, error)
	// 查询secret
	SelectSecret(ctx context.Context, in *SelectSecretRequestWithSecret, opts ...grpc.CallOption) (*SecretResponseWithSecret, error)
}

type autherClient struct {
	cc grpc.ClientConnInterface
}

func NewAutherClient(cc grpc.ClientConnInterface) AutherClient {
	return &autherClient{cc}
}

func (c *autherClient) JudgeToken(ctx context.Context, in *JudgeJwtRequestWithJwt, opts ...grpc.CallOption) (*JudgeJwtResponseWithJwt, error) {
	out := new(JudgeJwtResponseWithJwt)
	err := c.cc.Invoke(ctx, "/authorization.Auther/judgeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autherClient) GenerateToken(ctx context.Context, in *GenerateJwtRequestWithJwt, opts ...grpc.CallOption) (*GenerateJwtResponseWithJwt, error) {
	out := new(GenerateJwtResponseWithJwt)
	err := c.cc.Invoke(ctx, "/authorization.Auther/generateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autherClient) InsertSecret(ctx context.Context, in *InsertAndUpdateSecretRequestWithSecret, opts ...grpc.CallOption) (*SecretResponseWithSecret, error) {
	out := new(SecretResponseWithSecret)
	err := c.cc.Invoke(ctx, "/authorization.Auther/insertSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autherClient) UpdateSecret(ctx context.Context, in *InsertAndUpdateSecretRequestWithSecret, opts ...grpc.CallOption) (*SecretResponseWithSecret, error) {
	out := new(SecretResponseWithSecret)
	err := c.cc.Invoke(ctx, "/authorization.Auther/updateSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autherClient) GenerateSecret(ctx context.Context, in *GenerateSecretRequestWithSecret, opts ...grpc.CallOption) (*SecretResponseWithSecret, error) {
	out := new(SecretResponseWithSecret)
	err := c.cc.Invoke(ctx, "/authorization.Auther/generateSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autherClient) DeleteSecret(ctx context.Context, in *DeleteSecretRequestWithSecret, opts ...grpc.CallOption) (*DeleteSecretResponseWithSecret, error) {
	out := new(DeleteSecretResponseWithSecret)
	err := c.cc.Invoke(ctx, "/authorization.Auther/deleteSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autherClient) SelectSecret(ctx context.Context, in *SelectSecretRequestWithSecret, opts ...grpc.CallOption) (*SecretResponseWithSecret, error) {
	out := new(SecretResponseWithSecret)
	err := c.cc.Invoke(ctx, "/authorization.Auther/selectSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutherServer is the server API for Auther service.
// All implementations must embed UnimplementedAutherServer
// for forward compatibility
type AutherServer interface {
	// 校验token
	JudgeToken(context.Context, *JudgeJwtRequestWithJwt) (*JudgeJwtResponseWithJwt, error)
	// 生成token
	GenerateToken(context.Context, *GenerateJwtRequestWithJwt) (*GenerateJwtResponseWithJwt, error)
	// 新增secret
	InsertSecret(context.Context, *InsertAndUpdateSecretRequestWithSecret) (*SecretResponseWithSecret, error)
	// 更新secret
	UpdateSecret(context.Context, *InsertAndUpdateSecretRequestWithSecret) (*SecretResponseWithSecret, error)
	// 为指定用户生成secret
	GenerateSecret(context.Context, *GenerateSecretRequestWithSecret) (*SecretResponseWithSecret, error)
	// 删除secret
	DeleteSecret(context.Context, *DeleteSecretRequestWithSecret) (*DeleteSecretResponseWithSecret, error)
	// 查询secret
	SelectSecret(context.Context, *SelectSecretRequestWithSecret) (*SecretResponseWithSecret, error)
	mustEmbedUnimplementedAutherServer()
}

// UnimplementedAutherServer must be embedded to have forward compatible implementations.
type UnimplementedAutherServer struct {
}

func (UnimplementedAutherServer) JudgeToken(context.Context, *JudgeJwtRequestWithJwt) (*JudgeJwtResponseWithJwt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JudgeToken not implemented")
}
func (UnimplementedAutherServer) GenerateToken(context.Context, *GenerateJwtRequestWithJwt) (*GenerateJwtResponseWithJwt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedAutherServer) InsertSecret(context.Context, *InsertAndUpdateSecretRequestWithSecret) (*SecretResponseWithSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertSecret not implemented")
}
func (UnimplementedAutherServer) UpdateSecret(context.Context, *InsertAndUpdateSecretRequestWithSecret) (*SecretResponseWithSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecret not implemented")
}
func (UnimplementedAutherServer) GenerateSecret(context.Context, *GenerateSecretRequestWithSecret) (*SecretResponseWithSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSecret not implemented")
}
func (UnimplementedAutherServer) DeleteSecret(context.Context, *DeleteSecretRequestWithSecret) (*DeleteSecretResponseWithSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedAutherServer) SelectSecret(context.Context, *SelectSecretRequestWithSecret) (*SecretResponseWithSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectSecret not implemented")
}
func (UnimplementedAutherServer) mustEmbedUnimplementedAutherServer() {}

// UnsafeAutherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutherServer will
// result in compilation errors.
type UnsafeAutherServer interface {
	mustEmbedUnimplementedAutherServer()
}

func RegisterAutherServer(s grpc.ServiceRegistrar, srv AutherServer) {
	s.RegisterService(&Auther_ServiceDesc, srv)
}

func _Auther_JudgeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JudgeJwtRequestWithJwt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutherServer).JudgeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.Auther/judgeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutherServer).JudgeToken(ctx, req.(*JudgeJwtRequestWithJwt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auther_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateJwtRequestWithJwt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutherServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.Auther/generateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutherServer).GenerateToken(ctx, req.(*GenerateJwtRequestWithJwt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auther_InsertSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertAndUpdateSecretRequestWithSecret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutherServer).InsertSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.Auther/insertSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutherServer).InsertSecret(ctx, req.(*InsertAndUpdateSecretRequestWithSecret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auther_UpdateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertAndUpdateSecretRequestWithSecret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutherServer).UpdateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.Auther/updateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutherServer).UpdateSecret(ctx, req.(*InsertAndUpdateSecretRequestWithSecret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auther_GenerateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSecretRequestWithSecret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutherServer).GenerateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.Auther/generateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutherServer).GenerateSecret(ctx, req.(*GenerateSecretRequestWithSecret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auther_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequestWithSecret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutherServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.Auther/deleteSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutherServer).DeleteSecret(ctx, req.(*DeleteSecretRequestWithSecret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auther_SelectSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectSecretRequestWithSecret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutherServer).SelectSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.Auther/selectSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutherServer).SelectSecret(ctx, req.(*SelectSecretRequestWithSecret))
	}
	return interceptor(ctx, in, info, handler)
}

// Auther_ServiceDesc is the grpc.ServiceDesc for Auther service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auther_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authorization.Auther",
	HandlerType: (*AutherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "judgeToken",
			Handler:    _Auther_JudgeToken_Handler,
		},
		{
			MethodName: "generateToken",
			Handler:    _Auther_GenerateToken_Handler,
		},
		{
			MethodName: "insertSecret",
			Handler:    _Auther_InsertSecret_Handler,
		},
		{
			MethodName: "updateSecret",
			Handler:    _Auther_UpdateSecret_Handler,
		},
		{
			MethodName: "generateSecret",
			Handler:    _Auther_GenerateSecret_Handler,
		},
		{
			MethodName: "deleteSecret",
			Handler:    _Auther_DeleteSecret_Handler,
		},
		{
			MethodName: "selectSecret",
			Handler:    _Auther_SelectSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authorization.proto",
}
