// Code generated by goctl. DO NOT EDIT.
// Source: authorization.proto

package auther

import (
	"context"

	"github.com/lius-new/blog-backend/rpc/authorization/authorization"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteSecretRequestWithSecret          = authorization.DeleteSecretRequestWithSecret
	DeleteSecretResponseWithSecret         = authorization.DeleteSecretResponseWithSecret
	GenerateJwtRequestWithJwt              = authorization.GenerateJwtRequestWithJwt
	GenerateJwtResponseWithJwt             = authorization.GenerateJwtResponseWithJwt
	GenerateSecretRequestWithSecret        = authorization.GenerateSecretRequestWithSecret
	InsertAndUpdateSecretRequestWithSecret = authorization.InsertAndUpdateSecretRequestWithSecret
	JudgeJwtRequestWithJwt                 = authorization.JudgeJwtRequestWithJwt
	JudgeJwtResponseWithJwt                = authorization.JudgeJwtResponseWithJwt
	SecretResponseWithSecret               = authorization.SecretResponseWithSecret
	SelectSecretRequestWithSecret          = authorization.SelectSecretRequestWithSecret

	Auther interface {
		// 校验token
		JudgeToken(ctx context.Context, in *JudgeJwtRequestWithJwt, opts ...grpc.CallOption) (*JudgeJwtResponseWithJwt, error)
		// 生成token
		GenerateToken(ctx context.Context, in *GenerateJwtRequestWithJwt, opts ...grpc.CallOption) (*GenerateJwtResponseWithJwt, error)
		// 新增secret
		InsertSecret(ctx context.Context, in *InsertAndUpdateSecretRequestWithSecret, opts ...grpc.CallOption) (*SecretResponseWithSecret, error)
		// 更新secret
		UpdateSecret(ctx context.Context, in *InsertAndUpdateSecretRequestWithSecret, opts ...grpc.CallOption) (*SecretResponseWithSecret, error)
		// 为指定用户生成secret
		GenerateSecret(ctx context.Context, in *GenerateSecretRequestWithSecret, opts ...grpc.CallOption) (*SecretResponseWithSecret, error)
		// 删除secret
		DeleteSecret(ctx context.Context, in *DeleteSecretRequestWithSecret, opts ...grpc.CallOption) (*DeleteSecretResponseWithSecret, error)
		// 查询secret
		SelectSecret(ctx context.Context, in *SelectSecretRequestWithSecret, opts ...grpc.CallOption) (*SecretResponseWithSecret, error)
	}

	defaultAuther struct {
		cli zrpc.Client
	}
)

func NewAuther(cli zrpc.Client) Auther {
	return &defaultAuther{
		cli: cli,
	}
}

// 校验token
func (m *defaultAuther) JudgeToken(ctx context.Context, in *JudgeJwtRequestWithJwt, opts ...grpc.CallOption) (*JudgeJwtResponseWithJwt, error) {
	client := authorization.NewAutherClient(m.cli.Conn())
	return client.JudgeToken(ctx, in, opts...)
}

// 生成token
func (m *defaultAuther) GenerateToken(ctx context.Context, in *GenerateJwtRequestWithJwt, opts ...grpc.CallOption) (*GenerateJwtResponseWithJwt, error) {
	client := authorization.NewAutherClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

// 新增secret
func (m *defaultAuther) InsertSecret(ctx context.Context, in *InsertAndUpdateSecretRequestWithSecret, opts ...grpc.CallOption) (*SecretResponseWithSecret, error) {
	client := authorization.NewAutherClient(m.cli.Conn())
	return client.InsertSecret(ctx, in, opts...)
}

// 更新secret
func (m *defaultAuther) UpdateSecret(ctx context.Context, in *InsertAndUpdateSecretRequestWithSecret, opts ...grpc.CallOption) (*SecretResponseWithSecret, error) {
	client := authorization.NewAutherClient(m.cli.Conn())
	return client.UpdateSecret(ctx, in, opts...)
}

// 为指定用户生成secret
func (m *defaultAuther) GenerateSecret(ctx context.Context, in *GenerateSecretRequestWithSecret, opts ...grpc.CallOption) (*SecretResponseWithSecret, error) {
	client := authorization.NewAutherClient(m.cli.Conn())
	return client.GenerateSecret(ctx, in, opts...)
}

// 删除secret
func (m *defaultAuther) DeleteSecret(ctx context.Context, in *DeleteSecretRequestWithSecret, opts ...grpc.CallOption) (*DeleteSecretResponseWithSecret, error) {
	client := authorization.NewAutherClient(m.cli.Conn())
	return client.DeleteSecret(ctx, in, opts...)
}

// 查询secret
func (m *defaultAuther) SelectSecret(ctx context.Context, in *SelectSecretRequestWithSecret, opts ...grpc.CallOption) (*SecretResponseWithSecret, error) {
	client := authorization.NewAutherClient(m.cli.Conn())
	return client.SelectSecret(ctx, in, opts...)
}
