// Code generated by goctl. DO NOT EDIT.
// Source: content.proto

package server

import (
	"context"

	"github.com/lius-new/blog-backend/rpc/content/content"
	"github.com/lius-new/blog-backend/rpc/content/internal/logic"
	"github.com/lius-new/blog-backend/rpc/content/internal/svc"
)

type ContentServer struct {
	svcCtx *svc.ServiceContext
	content.UnimplementedContentServer
}

func NewContentServer(svcCtx *svc.ServiceContext) *ContentServer {
	return &ContentServer{
		svcCtx: svcCtx,
	}
}

// * article create *
func (s *ContentServer) CreateArtilce(ctx context.Context, in *content.CreateArticleRequest) (*content.CreateArticleResponse, error) {
	l := logic.NewCreateArtilceLogic(ctx, s.svcCtx)
	return l.CreateArtilce(in)
}

// * article select *
func (s *ContentServer) SelectArtilceById(ctx context.Context, in *content.SelectArticleByIdRequest) (*content.SelectArticle, error) {
	l := logic.NewSelectArtilceByIdLogic(ctx, s.svcCtx)
	return l.SelectArtilceById(in)
}

// 分页获取文章
func (s *ContentServer) SelectArtilceByPage(ctx context.Context, in *content.SelectArticleByPageRequest) (*content.SelectArticleByPageResponse, error) {
	l := logic.NewSelectArtilceByPageLogic(ctx, s.svcCtx)
	return l.SelectArtilceByPage(in)
}

// 根据tag获取文章
func (s *ContentServer) SelectArtilceByTag(ctx context.Context, in *content.SelectArticleByTagRequest) (*content.SelectArticleByTagResponse, error) {
	l := logic.NewSelectArtilceByTagLogic(ctx, s.svcCtx)
	return l.SelectArtilceByTag(in)
}

// * article search *
func (s *ContentServer) SearchArtilce(ctx context.Context, in *content.SearchArtilceRequest) (*content.SearchArtilceResponse, error) {
	l := logic.NewSearchArtilceLogic(ctx, s.svcCtx)
	return l.SearchArtilce(in)
}

// * article modify *
func (s *ContentServer) ModifyArtilceTitle(ctx context.Context, in *content.ModifyArticleTitleRequest) (*content.ModifyArticleTitleResponse, error) {
	l := logic.NewModifyArtilceTitleLogic(ctx, s.svcCtx)
	return l.ModifyArtilceTitle(in)
}

// 修改文章描述
func (s *ContentServer) ModifyArtilceDesc(ctx context.Context, in *content.ModifyArticleDescRequest) (*content.ModifyArticleDescResponse, error) {
	l := logic.NewModifyArtilceDescLogic(ctx, s.svcCtx)
	return l.ModifyArtilceDesc(in)
}

// 修改文章内容
func (s *ContentServer) ModifyArtilceContent(ctx context.Context, in *content.ModifyArticleContentRequest) (*content.ModifyArticleContentResponse, error) {
	l := logic.NewModifyArtilceContentLogic(ctx, s.svcCtx)
	return l.ModifyArtilceContent(in)
}

// 修改文章标签
func (s *ContentServer) ModifyArtilceTag(ctx context.Context, in *content.ModifyArticleTagRequest) (*content.ModifyArticleTagResponse, error) {
	l := logic.NewModifyArtilceTagLogic(ctx, s.svcCtx)
	return l.ModifyArtilceTag(in)
}

// 修改文章Cover
func (s *ContentServer) ModifyArtilceCover(ctx context.Context, in *content.ModifyArticleCoverRequest) (*content.ModifyArticleCoverResponse, error) {
	l := logic.NewModifyArtilceCoverLogic(ctx, s.svcCtx)
	return l.ModifyArtilceCover(in)
}

// 修改文章的可见性
func (s *ContentServer) ModifyArtilceVisiable(ctx context.Context, in *content.ModifyArticleVisiableRequest) (*content.ModifyArticleVisiableResponse, error) {
	l := logic.NewModifyArtilceVisiableLogic(ctx, s.svcCtx)
	return l.ModifyArtilceVisiable(in)
}

// 根据tag修改文章的可见性
func (s *ContentServer) ModifyArtilceVisiableByTag(ctx context.Context, in *content.ModifyArticleVisiableByTagRequest) (*content.ModifyArticleVisiableByTagResponse, error) {
	l := logic.NewModifyArtilceVisiableByTagLogic(ctx, s.svcCtx)
	return l.ModifyArtilceVisiableByTag(in)
}

// 根据删除文章
func (s *ContentServer) DeleteArtilceById(ctx context.Context, in *content.DeleteArticleRequest) (*content.DeleteArticleResponse, error) {
	l := logic.NewDeleteArtilceByIdLogic(ctx, s.svcCtx)
	return l.DeleteArtilceById(in)
}

// ** tag **
func (s *ContentServer) CreateTag(ctx context.Context, in *content.CreateTagRequest) (*content.CreateTagResponse, error) {
	l := logic.NewCreateTagLogic(ctx, s.svcCtx)
	return l.CreateTag(in)
}

// 修改tag name
func (s *ContentServer) ModifyTagName(ctx context.Context, in *content.ModifyTagNameRequest) (*content.ModifyTagNameResponse, error) {
	l := logic.NewModifyTagNameLogic(ctx, s.svcCtx)
	return l.ModifyTagName(in)
}

// 修改tag可见性(visiable)
func (s *ContentServer) ModifyTagVisiable(ctx context.Context, in *content.ModifyTagVisiableRequest) (*content.ModifyTagVisiableResponse, error) {
	l := logic.NewModifyTagVisiableLogic(ctx, s.svcCtx)
	return l.ModifyTagVisiable(in)
}

// 添加article到tag
func (s *ContentServer) ModifyTagPushArticle(ctx context.Context, in *content.ModifyTagPushArticleRequest) (*content.ModifyTagPushArticleResponse, error) {
	l := logic.NewModifyTagPushArticleLogic(ctx, s.svcCtx)
	return l.ModifyTagPushArticle(in)
}

// 从tag中移除article
func (s *ContentServer) ModifyTagRemoveArticle(ctx context.Context, in *content.ModifyTagRemoveArticleRequest) (*content.ModifyTagRemoveArticleResponse, error) {
	l := logic.NewModifyTagRemoveArticleLogic(ctx, s.svcCtx)
	return l.ModifyTagRemoveArticle(in)
}

// 根据分页获取tag
func (s *ContentServer) SelectTagByPage(ctx context.Context, in *content.SelectTagByPageRequest) (*content.SelectTagByPageResponse, error) {
	l := logic.NewSelectTagByPageLogic(ctx, s.svcCtx)
	return l.SelectTagByPage(in)
}

// 根据id获取tag
func (s *ContentServer) SelectTagById(ctx context.Context, in *content.SelectTagByIdRequest) (*content.SelectTagByIdResponse, error) {
	l := logic.NewSelectTagByIdLogic(ctx, s.svcCtx)
	return l.SelectTagById(in)
}

// 删除tag
func (s *ContentServer) DeleteTag(ctx context.Context, in *content.DeleteTagRequest) (*content.DeleteTagResponse, error) {
	l := logic.NewDeleteTagLogic(ctx, s.svcCtx)
	return l.DeleteTag(in)
}
