// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: content.proto

package content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContentClient is the client API for Content service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentClient interface {
	// * article create *
	// 创建文章
	CreateArtilce(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*CreateArticleResponse, error)
	// * article select *
	// 根据id查找文章
	SelectArtilceById(ctx context.Context, in *SelectArticleByIdRequest, opts ...grpc.CallOption) (*SelectArticle, error)
	// 分页获取文章
	SelectArtilceByPage(ctx context.Context, in *SelectArticleByPageRequest, opts ...grpc.CallOption) (*SelectArticleByPageResponse, error)
	// 根据tag获取文章
	SelectArtilceByTag(ctx context.Context, in *SelectArticleByTagRequest, opts ...grpc.CallOption) (*SelectArticleByTagResponse, error)
	// * article search *
	// 搜索文章: 标题或文章或Desc
	SearchArtilce(ctx context.Context, in *SearchArtilceRequest, opts ...grpc.CallOption) (*SearchArtilceResponse, error)
	// * article modify *
	// 修改文章标题
	ModifyArtilceTitle(ctx context.Context, in *ModifyArticleTitleRequest, opts ...grpc.CallOption) (*ModifyArticleTitleResponse, error)
	// 修改文章描述
	ModifyArtilceDesc(ctx context.Context, in *ModifyArticleDescRequest, opts ...grpc.CallOption) (*ModifyArticleDescResponse, error)
	// 修改文章内容
	ModifyArtilceContent(ctx context.Context, in *ModifyArticleContentRequest, opts ...grpc.CallOption) (*ModifyArticleContentResponse, error)
	// 修改文章标签
	ModifyArtilceTag(ctx context.Context, in *ModifyArticleTagRequest, opts ...grpc.CallOption) (*ModifyArticleTagResponse, error)
	// 修改文章Cover
	ModifyArtilceCover(ctx context.Context, in *ModifyArticleCoverRequest, opts ...grpc.CallOption) (*ModifyArticleCoverResponse, error)
	// 修改文章的可见性
	ModifyArtilceVisiable(ctx context.Context, in *ModifyArticleVisiableRequest, opts ...grpc.CallOption) (*ModifyArticleVisiableResponse, error)
	// 根据tag修改文章的可见性
	ModifyArtilceVisiableByTag(ctx context.Context, in *ModifyArticleVisiableByTagRequest, opts ...grpc.CallOption) (*ModifyArticleVisiableByTagResponse, error)
	// 根据删除文章
	DeleteArtilceById(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleResponse, error)
	// ** tag **
	// 创建tag
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error)
	// 修改tag name
	ModifyTagName(ctx context.Context, in *ModifyTagNameRequest, opts ...grpc.CallOption) (*ModifyTagNameResponse, error)
	// 修改tag可见性(visiable)
	ModifyTagVisiable(ctx context.Context, in *ModifyTagVisiableRequest, opts ...grpc.CallOption) (*ModifyTagVisiableResponse, error)
	// 添加article到tag
	ModifyTagPushArticle(ctx context.Context, in *ModifyTagPushArticleRequest, opts ...grpc.CallOption) (*ModifyTagPushArticleResponse, error)
	// 从tag中移除article
	ModifyTagRemoveArticle(ctx context.Context, in *ModifyTagRemoveArticleRequest, opts ...grpc.CallOption) (*ModifyTagRemoveArticleResponse, error)
	// 根据分页获取tag
	SelectTagByPage(ctx context.Context, in *SelectTagByPageRequest, opts ...grpc.CallOption) (*SelectTagByPageResponse, error)
	// 根据id获取tag
	SelectTagById(ctx context.Context, in *SelectTagByIdRequest, opts ...grpc.CallOption) (*SelectTagByIdResponse, error)
	// 删除tag
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error)
}

type contentClient struct {
	cc grpc.ClientConnInterface
}

func NewContentClient(cc grpc.ClientConnInterface) ContentClient {
	return &contentClient{cc}
}

func (c *contentClient) CreateArtilce(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*CreateArticleResponse, error) {
	out := new(CreateArticleResponse)
	err := c.cc.Invoke(ctx, "/content.Content/CreateArtilce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) SelectArtilceById(ctx context.Context, in *SelectArticleByIdRequest, opts ...grpc.CallOption) (*SelectArticle, error) {
	out := new(SelectArticle)
	err := c.cc.Invoke(ctx, "/content.Content/SelectArtilceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) SelectArtilceByPage(ctx context.Context, in *SelectArticleByPageRequest, opts ...grpc.CallOption) (*SelectArticleByPageResponse, error) {
	out := new(SelectArticleByPageResponse)
	err := c.cc.Invoke(ctx, "/content.Content/SelectArtilceByPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) SelectArtilceByTag(ctx context.Context, in *SelectArticleByTagRequest, opts ...grpc.CallOption) (*SelectArticleByTagResponse, error) {
	out := new(SelectArticleByTagResponse)
	err := c.cc.Invoke(ctx, "/content.Content/SelectArtilceByTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) SearchArtilce(ctx context.Context, in *SearchArtilceRequest, opts ...grpc.CallOption) (*SearchArtilceResponse, error) {
	out := new(SearchArtilceResponse)
	err := c.cc.Invoke(ctx, "/content.Content/SearchArtilce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) ModifyArtilceTitle(ctx context.Context, in *ModifyArticleTitleRequest, opts ...grpc.CallOption) (*ModifyArticleTitleResponse, error) {
	out := new(ModifyArticleTitleResponse)
	err := c.cc.Invoke(ctx, "/content.Content/ModifyArtilceTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) ModifyArtilceDesc(ctx context.Context, in *ModifyArticleDescRequest, opts ...grpc.CallOption) (*ModifyArticleDescResponse, error) {
	out := new(ModifyArticleDescResponse)
	err := c.cc.Invoke(ctx, "/content.Content/ModifyArtilceDesc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) ModifyArtilceContent(ctx context.Context, in *ModifyArticleContentRequest, opts ...grpc.CallOption) (*ModifyArticleContentResponse, error) {
	out := new(ModifyArticleContentResponse)
	err := c.cc.Invoke(ctx, "/content.Content/ModifyArtilceContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) ModifyArtilceTag(ctx context.Context, in *ModifyArticleTagRequest, opts ...grpc.CallOption) (*ModifyArticleTagResponse, error) {
	out := new(ModifyArticleTagResponse)
	err := c.cc.Invoke(ctx, "/content.Content/ModifyArtilceTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) ModifyArtilceCover(ctx context.Context, in *ModifyArticleCoverRequest, opts ...grpc.CallOption) (*ModifyArticleCoverResponse, error) {
	out := new(ModifyArticleCoverResponse)
	err := c.cc.Invoke(ctx, "/content.Content/ModifyArtilceCover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) ModifyArtilceVisiable(ctx context.Context, in *ModifyArticleVisiableRequest, opts ...grpc.CallOption) (*ModifyArticleVisiableResponse, error) {
	out := new(ModifyArticleVisiableResponse)
	err := c.cc.Invoke(ctx, "/content.Content/ModifyArtilceVisiable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) ModifyArtilceVisiableByTag(ctx context.Context, in *ModifyArticleVisiableByTagRequest, opts ...grpc.CallOption) (*ModifyArticleVisiableByTagResponse, error) {
	out := new(ModifyArticleVisiableByTagResponse)
	err := c.cc.Invoke(ctx, "/content.Content/ModifyArtilceVisiableByTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) DeleteArtilceById(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleResponse, error) {
	out := new(DeleteArticleResponse)
	err := c.cc.Invoke(ctx, "/content.Content/DeleteArtilceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error) {
	out := new(CreateTagResponse)
	err := c.cc.Invoke(ctx, "/content.Content/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) ModifyTagName(ctx context.Context, in *ModifyTagNameRequest, opts ...grpc.CallOption) (*ModifyTagNameResponse, error) {
	out := new(ModifyTagNameResponse)
	err := c.cc.Invoke(ctx, "/content.Content/ModifyTagName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) ModifyTagVisiable(ctx context.Context, in *ModifyTagVisiableRequest, opts ...grpc.CallOption) (*ModifyTagVisiableResponse, error) {
	out := new(ModifyTagVisiableResponse)
	err := c.cc.Invoke(ctx, "/content.Content/ModifyTagVisiable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) ModifyTagPushArticle(ctx context.Context, in *ModifyTagPushArticleRequest, opts ...grpc.CallOption) (*ModifyTagPushArticleResponse, error) {
	out := new(ModifyTagPushArticleResponse)
	err := c.cc.Invoke(ctx, "/content.Content/ModifyTagPushArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) ModifyTagRemoveArticle(ctx context.Context, in *ModifyTagRemoveArticleRequest, opts ...grpc.CallOption) (*ModifyTagRemoveArticleResponse, error) {
	out := new(ModifyTagRemoveArticleResponse)
	err := c.cc.Invoke(ctx, "/content.Content/ModifyTagRemoveArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) SelectTagByPage(ctx context.Context, in *SelectTagByPageRequest, opts ...grpc.CallOption) (*SelectTagByPageResponse, error) {
	out := new(SelectTagByPageResponse)
	err := c.cc.Invoke(ctx, "/content.Content/SelectTagByPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) SelectTagById(ctx context.Context, in *SelectTagByIdRequest, opts ...grpc.CallOption) (*SelectTagByIdResponse, error) {
	out := new(SelectTagByIdResponse)
	err := c.cc.Invoke(ctx, "/content.Content/SelectTagById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error) {
	out := new(DeleteTagResponse)
	err := c.cc.Invoke(ctx, "/content.Content/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServer is the server API for Content service.
// All implementations must embed UnimplementedContentServer
// for forward compatibility
type ContentServer interface {
	// * article create *
	// 创建文章
	CreateArtilce(context.Context, *CreateArticleRequest) (*CreateArticleResponse, error)
	// * article select *
	// 根据id查找文章
	SelectArtilceById(context.Context, *SelectArticleByIdRequest) (*SelectArticle, error)
	// 分页获取文章
	SelectArtilceByPage(context.Context, *SelectArticleByPageRequest) (*SelectArticleByPageResponse, error)
	// 根据tag获取文章
	SelectArtilceByTag(context.Context, *SelectArticleByTagRequest) (*SelectArticleByTagResponse, error)
	// * article search *
	// 搜索文章: 标题或文章或Desc
	SearchArtilce(context.Context, *SearchArtilceRequest) (*SearchArtilceResponse, error)
	// * article modify *
	// 修改文章标题
	ModifyArtilceTitle(context.Context, *ModifyArticleTitleRequest) (*ModifyArticleTitleResponse, error)
	// 修改文章描述
	ModifyArtilceDesc(context.Context, *ModifyArticleDescRequest) (*ModifyArticleDescResponse, error)
	// 修改文章内容
	ModifyArtilceContent(context.Context, *ModifyArticleContentRequest) (*ModifyArticleContentResponse, error)
	// 修改文章标签
	ModifyArtilceTag(context.Context, *ModifyArticleTagRequest) (*ModifyArticleTagResponse, error)
	// 修改文章Cover
	ModifyArtilceCover(context.Context, *ModifyArticleCoverRequest) (*ModifyArticleCoverResponse, error)
	// 修改文章的可见性
	ModifyArtilceVisiable(context.Context, *ModifyArticleVisiableRequest) (*ModifyArticleVisiableResponse, error)
	// 根据tag修改文章的可见性
	ModifyArtilceVisiableByTag(context.Context, *ModifyArticleVisiableByTagRequest) (*ModifyArticleVisiableByTagResponse, error)
	// 根据删除文章
	DeleteArtilceById(context.Context, *DeleteArticleRequest) (*DeleteArticleResponse, error)
	// ** tag **
	// 创建tag
	CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error)
	// 修改tag name
	ModifyTagName(context.Context, *ModifyTagNameRequest) (*ModifyTagNameResponse, error)
	// 修改tag可见性(visiable)
	ModifyTagVisiable(context.Context, *ModifyTagVisiableRequest) (*ModifyTagVisiableResponse, error)
	// 添加article到tag
	ModifyTagPushArticle(context.Context, *ModifyTagPushArticleRequest) (*ModifyTagPushArticleResponse, error)
	// 从tag中移除article
	ModifyTagRemoveArticle(context.Context, *ModifyTagRemoveArticleRequest) (*ModifyTagRemoveArticleResponse, error)
	// 根据分页获取tag
	SelectTagByPage(context.Context, *SelectTagByPageRequest) (*SelectTagByPageResponse, error)
	// 根据id获取tag
	SelectTagById(context.Context, *SelectTagByIdRequest) (*SelectTagByIdResponse, error)
	// 删除tag
	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error)
	mustEmbedUnimplementedContentServer()
}

// UnimplementedContentServer must be embedded to have forward compatible implementations.
type UnimplementedContentServer struct {
}

func (UnimplementedContentServer) CreateArtilce(context.Context, *CreateArticleRequest) (*CreateArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArtilce not implemented")
}
func (UnimplementedContentServer) SelectArtilceById(context.Context, *SelectArticleByIdRequest) (*SelectArticle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectArtilceById not implemented")
}
func (UnimplementedContentServer) SelectArtilceByPage(context.Context, *SelectArticleByPageRequest) (*SelectArticleByPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectArtilceByPage not implemented")
}
func (UnimplementedContentServer) SelectArtilceByTag(context.Context, *SelectArticleByTagRequest) (*SelectArticleByTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectArtilceByTag not implemented")
}
func (UnimplementedContentServer) SearchArtilce(context.Context, *SearchArtilceRequest) (*SearchArtilceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArtilce not implemented")
}
func (UnimplementedContentServer) ModifyArtilceTitle(context.Context, *ModifyArticleTitleRequest) (*ModifyArticleTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyArtilceTitle not implemented")
}
func (UnimplementedContentServer) ModifyArtilceDesc(context.Context, *ModifyArticleDescRequest) (*ModifyArticleDescResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyArtilceDesc not implemented")
}
func (UnimplementedContentServer) ModifyArtilceContent(context.Context, *ModifyArticleContentRequest) (*ModifyArticleContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyArtilceContent not implemented")
}
func (UnimplementedContentServer) ModifyArtilceTag(context.Context, *ModifyArticleTagRequest) (*ModifyArticleTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyArtilceTag not implemented")
}
func (UnimplementedContentServer) ModifyArtilceCover(context.Context, *ModifyArticleCoverRequest) (*ModifyArticleCoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyArtilceCover not implemented")
}
func (UnimplementedContentServer) ModifyArtilceVisiable(context.Context, *ModifyArticleVisiableRequest) (*ModifyArticleVisiableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyArtilceVisiable not implemented")
}
func (UnimplementedContentServer) ModifyArtilceVisiableByTag(context.Context, *ModifyArticleVisiableByTagRequest) (*ModifyArticleVisiableByTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyArtilceVisiableByTag not implemented")
}
func (UnimplementedContentServer) DeleteArtilceById(context.Context, *DeleteArticleRequest) (*DeleteArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtilceById not implemented")
}
func (UnimplementedContentServer) CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedContentServer) ModifyTagName(context.Context, *ModifyTagNameRequest) (*ModifyTagNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyTagName not implemented")
}
func (UnimplementedContentServer) ModifyTagVisiable(context.Context, *ModifyTagVisiableRequest) (*ModifyTagVisiableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyTagVisiable not implemented")
}
func (UnimplementedContentServer) ModifyTagPushArticle(context.Context, *ModifyTagPushArticleRequest) (*ModifyTagPushArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyTagPushArticle not implemented")
}
func (UnimplementedContentServer) ModifyTagRemoveArticle(context.Context, *ModifyTagRemoveArticleRequest) (*ModifyTagRemoveArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyTagRemoveArticle not implemented")
}
func (UnimplementedContentServer) SelectTagByPage(context.Context, *SelectTagByPageRequest) (*SelectTagByPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectTagByPage not implemented")
}
func (UnimplementedContentServer) SelectTagById(context.Context, *SelectTagByIdRequest) (*SelectTagByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectTagById not implemented")
}
func (UnimplementedContentServer) DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedContentServer) mustEmbedUnimplementedContentServer() {}

// UnsafeContentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServer will
// result in compilation errors.
type UnsafeContentServer interface {
	mustEmbedUnimplementedContentServer()
}

func RegisterContentServer(s grpc.ServiceRegistrar, srv ContentServer) {
	s.RegisterService(&Content_ServiceDesc, srv)
}

func _Content_CreateArtilce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateArtilce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/CreateArtilce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateArtilce(ctx, req.(*CreateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_SelectArtilceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectArticleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).SelectArtilceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/SelectArtilceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).SelectArtilceById(ctx, req.(*SelectArticleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_SelectArtilceByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectArticleByPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).SelectArtilceByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/SelectArtilceByPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).SelectArtilceByPage(ctx, req.(*SelectArticleByPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_SelectArtilceByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectArticleByTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).SelectArtilceByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/SelectArtilceByTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).SelectArtilceByTag(ctx, req.(*SelectArticleByTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_SearchArtilce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchArtilceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).SearchArtilce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/SearchArtilce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).SearchArtilce(ctx, req.(*SearchArtilceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_ModifyArtilceTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyArticleTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).ModifyArtilceTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/ModifyArtilceTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).ModifyArtilceTitle(ctx, req.(*ModifyArticleTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_ModifyArtilceDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyArticleDescRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).ModifyArtilceDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/ModifyArtilceDesc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).ModifyArtilceDesc(ctx, req.(*ModifyArticleDescRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_ModifyArtilceContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyArticleContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).ModifyArtilceContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/ModifyArtilceContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).ModifyArtilceContent(ctx, req.(*ModifyArticleContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_ModifyArtilceTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyArticleTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).ModifyArtilceTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/ModifyArtilceTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).ModifyArtilceTag(ctx, req.(*ModifyArticleTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_ModifyArtilceCover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyArticleCoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).ModifyArtilceCover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/ModifyArtilceCover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).ModifyArtilceCover(ctx, req.(*ModifyArticleCoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_ModifyArtilceVisiable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyArticleVisiableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).ModifyArtilceVisiable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/ModifyArtilceVisiable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).ModifyArtilceVisiable(ctx, req.(*ModifyArticleVisiableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_ModifyArtilceVisiableByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyArticleVisiableByTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).ModifyArtilceVisiableByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/ModifyArtilceVisiableByTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).ModifyArtilceVisiableByTag(ctx, req.(*ModifyArticleVisiableByTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_DeleteArtilceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).DeleteArtilceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/DeleteArtilceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).DeleteArtilceById(ctx, req.(*DeleteArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_ModifyTagName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyTagNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).ModifyTagName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/ModifyTagName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).ModifyTagName(ctx, req.(*ModifyTagNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_ModifyTagVisiable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyTagVisiableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).ModifyTagVisiable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/ModifyTagVisiable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).ModifyTagVisiable(ctx, req.(*ModifyTagVisiableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_ModifyTagPushArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyTagPushArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).ModifyTagPushArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/ModifyTagPushArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).ModifyTagPushArticle(ctx, req.(*ModifyTagPushArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_ModifyTagRemoveArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyTagRemoveArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).ModifyTagRemoveArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/ModifyTagRemoveArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).ModifyTagRemoveArticle(ctx, req.(*ModifyTagRemoveArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_SelectTagByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectTagByPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).SelectTagByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/SelectTagByPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).SelectTagByPage(ctx, req.(*SelectTagByPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_SelectTagById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectTagByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).SelectTagById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/SelectTagById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).SelectTagById(ctx, req.(*SelectTagByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Content_ServiceDesc is the grpc.ServiceDesc for Content service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Content_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.Content",
	HandlerType: (*ContentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArtilce",
			Handler:    _Content_CreateArtilce_Handler,
		},
		{
			MethodName: "SelectArtilceById",
			Handler:    _Content_SelectArtilceById_Handler,
		},
		{
			MethodName: "SelectArtilceByPage",
			Handler:    _Content_SelectArtilceByPage_Handler,
		},
		{
			MethodName: "SelectArtilceByTag",
			Handler:    _Content_SelectArtilceByTag_Handler,
		},
		{
			MethodName: "SearchArtilce",
			Handler:    _Content_SearchArtilce_Handler,
		},
		{
			MethodName: "ModifyArtilceTitle",
			Handler:    _Content_ModifyArtilceTitle_Handler,
		},
		{
			MethodName: "ModifyArtilceDesc",
			Handler:    _Content_ModifyArtilceDesc_Handler,
		},
		{
			MethodName: "ModifyArtilceContent",
			Handler:    _Content_ModifyArtilceContent_Handler,
		},
		{
			MethodName: "ModifyArtilceTag",
			Handler:    _Content_ModifyArtilceTag_Handler,
		},
		{
			MethodName: "ModifyArtilceCover",
			Handler:    _Content_ModifyArtilceCover_Handler,
		},
		{
			MethodName: "ModifyArtilceVisiable",
			Handler:    _Content_ModifyArtilceVisiable_Handler,
		},
		{
			MethodName: "ModifyArtilceVisiableByTag",
			Handler:    _Content_ModifyArtilceVisiableByTag_Handler,
		},
		{
			MethodName: "DeleteArtilceById",
			Handler:    _Content_DeleteArtilceById_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _Content_CreateTag_Handler,
		},
		{
			MethodName: "ModifyTagName",
			Handler:    _Content_ModifyTagName_Handler,
		},
		{
			MethodName: "ModifyTagVisiable",
			Handler:    _Content_ModifyTagVisiable_Handler,
		},
		{
			MethodName: "ModifyTagPushArticle",
			Handler:    _Content_ModifyTagPushArticle_Handler,
		},
		{
			MethodName: "ModifyTagRemoveArticle",
			Handler:    _Content_ModifyTagRemoveArticle_Handler,
		},
		{
			MethodName: "SelectTagByPage",
			Handler:    _Content_SelectTagByPage_Handler,
		},
		{
			MethodName: "SelectTagById",
			Handler:    _Content_SelectTagById_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _Content_DeleteTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content.proto",
}
